# Import necessary module for Excel handling
Function Import-Excel {
    param([string]$Path)
    $Excel = New-Object -ComObject Excel.Application
    $Excel.Visible = $false
    $Workbook = $Excel.Workbooks.Open((Get-Item $Path).FullName)
    $Sheet = $Workbook.Sheets.Item(1)
    
    # Read data, skipping the first 3 rows
    $Data = @()
    $Row = 4  # Actual data starts from row 4
    while ($Sheet.Cells.Item($Row, 1).Value2 -ne $null) {
        $RowData = @{}
        $RowData["Row"] = $Row
        $RowData["BA Report No"] = $Sheet.Cells.Item($Row, 1).Text
        $RowData["BA Reference No"] = $Sheet.Cells.Item($Row, 2).Text
        $RowData["Property Address"] = $Sheet.Cells.Item($Row, 3).Text
        $RowData["Postcode"] = $Sheet.Cells.Item($Row, 4).Text
        $RowData["Coded Reason For Report"] = $Sheet.Cells.Item($Row, 5).Text
        $RowData["Date of Change"] = $Sheet.Cells.Item($Row, 6).Text
        $RowData["Band in Valuation List"] = $Sheet.Cells.Item($Row, 7).Text
        $RowData["UPRN"] = $Sheet.Cells.Item($Row, 8).Text
        $RowData["Occupier's Name"] = $Sheet.Cells.Item($Row, 9).Text
        $RowData["Billing Address"] = $Sheet.Cells.Item($Row, 10).Text
        $RowData["Contact Telephone Number"] = $Sheet.Cells.Item($Row, 11).Text
        $RowData["Plan Available"] = $Sheet.Cells.Item($Row, 12).Text
        $RowData["Plan Reference No"] = $Sheet.Cells.Item($Row, 13).Text
        $RowData["Source of Information"] = $Sheet.Cells.Item($Row, 14).Text
        $RowData["OS Grid Ref"] = $Sheet.Cells.Item($Row, 15).Text
        $RowData["Details of Alterations and other Remarks"] = $Sheet.Cells.Item($Row, 16).Text
        $Data += $RowData
        $Row++
    }
    
    $Workbook.Close($false)
    $Excel.Quit()
    [System.Runtime.Interopservices.Marshal]::ReleaseComObject($Excel) | Out-Null
    return $Data
}

# Define validation rules
$ValidationRules = @{
    "BA Report No" = @{ min_length = 1; max_length = 8; required = $true; numeric = $true }
    "BA Reference No" = @{ min_length = 1; max_length = 25; required = $true }
    "Property Address" = @{ min_length = 1; max_length = 600; required = $true }
    "Postcode" = @{ min_length = 1; max_length = 8; required = $true }
    "Coded Reason For Report" = @{ required = $true; regex = "^CR\d{2}$" }
    "Date of Change" = @{ required = $true; date_format = "dd-MMM-yy"; min_date = "01-Apr-1993"; min_date_Wales = "01-Apr-2005" }
    "Band in Valuation List" = @{ required = $true; values = @("a", "b", "c", "d", "e", "f") }
    "UPRN" = @{ min_length = 1; max_length = 12; numeric = $true }
    "Occupier's Name" = @{ max_length = 35 }
    "Billing Address" = @{ max_length = 175 }
    "Contact Telephone Number" = @{ min_length = 10; max_length = 15; numeric = $true }
    "Plan Available" = @{ values = @("Y", "") }
    "Plan Reference No" = @{ max_length = 25 }
    "Source of Information" = @{ required = $true; values = @("BA Inspector", "Third Party") }
    "OS Grid Ref" = @{ max_length = 21; regex = "^\d{1,10} \d{1,10}$" }
    "Details of Alterations and other Remarks" = @{ max_length = 255 }
}

# Function to validate data
Function Validate-Data {
    param([string]$FilePath)
    
    if ($FilePath -match ".xlsx$") {
        $Data = Import-Excel -Path $FilePath
    } elseif ($FilePath -match ".csv$") {
        $Data = Import-Csv -Path $FilePath | Select-Object -Skip 3
    } else {
        Write-Host "Unsupported file format. Please provide CSV or Excel file."
        return
    }
    
    $ErrorLog = @()
    
    foreach ($RowData in $Data) {
        $RowNumber = $RowData.Row
        $Errors = @()

        foreach ($Column in $ValidationRules.Keys) {
            $Rules = $ValidationRules[$Column]
            $Value = $RowData.$Column -as [string]

            # Required Field Check
            if ($Rules.required -and (-not $Value)) {
                $Errors += "$Column is required"
            }

            # Length Check
            if ($Rules.max_length -and $Value.Length -gt $Rules.max_length) {
                $Errors += "$Column exceeds max length ($($Rules.max_length) chars)"
            }
            if ($Rules.min_length -and $Value.Length -lt $Rules.min_length) {
                $Errors += "$Column must be at least ($($Rules.min_length) chars)"
            }

            # Numeric Check
            if ($Rules.numeric -and $Value -match "\D") {
                $Errors += "$Column must be numeric"
            }

            # Regex Check
            if ($Rules.regex -and $Value -and (-not ($Value -match $Rules.regex))) {
                $Errors += "$Column has invalid format"
            }

            # Date Format Check
            if ($Rules.date_format -and $Value) {
                try {
                    $ParsedDate = [datetime]::ParseExact($Value, "dd-MMM-yy", $null)
                    if ($ParsedDate -lt [datetime]::ParseExact($Rules.min_date, "dd-MMM-yy", $null)) {
                        $Errors += "$Column must be after $($Rules.min_date)"
                    }
                } catch {
                    $Errors += "$Column must be in format dd-MMM-yy"
                }
            }

            # Dropdown Values Check
            if ($Rules.values -and $Value -and (-not ($Rules.values -contains $Value))) {
                $Errors += "$Column must be one of $($Rules.values -join ', ')"
            }
        }

        if ($Errors.Count -gt 0) {
            $ErrorLog += "Row $RowNumber: " + ($Errors -join "; ")
        }
    }

    if ($ErrorLog.Count -gt 0) {
        $ErrorLog | Out-File "Validation_Errors.txt"
        Write-Host "Validation completed. Errors found. Check Validation_Errors.txt"
    } else {
        Write-Host "Validation completed successfully. No errors found."
    }
}

# Example usage
$FilePath = "your_file.xlsx"  # Change to your actual file path
Validate-Data -FilePath $FilePath
