Here is a **focused list of the required fixes** to address the **WCAG 2.2 AA - 3.3.3 Error Suggestion** issues in your **Address Lookup JavaScript**, based on your provided code:

---

## ‚úÖ 1. **Normalize Postcode Input (trim, uppercase, remove extra spaces)**

### **Where:**  
Inside `findAddress()` function before validation

### **Current Issue:**  
Users entering lowercase, extra spaces, or no spaces get invalid error even though the postcode is technically correct.

### **Fix:**
Add normalization logic:
```js
let rawPostcode = postcodeInput.val().trim();
let normalizedPostcode = rawPostcode.toUpperCase().replace(/\s+/g, ''); // Strip extra spaces

postcodeInput.val(rawPostcode); // Optionally preserve original for display

// Use normalizedPostcode for validation and lookup
```

Then use `normalizedPostcode` in regex test and API call:
```js
if (!postcodeRegex.test(normalizedPostcode)) {
  // trigger format error
}
...
resolve(normalizedPostcode); // use in postcodeSearchWithPluginFetch
```

---

## ‚úÖ 2. **Improve Postcode Validation Regex**

### **Where:**  
You have:
```js
const postcodeRegex = new RegExp(/^([A-Za-z]{1,2}[\d]{1,2}[A-Za-z]?)([\s]?)+([\d][A-Za-z]{2})$/);
```

### **Issue:**  
This fails on many valid UK postcode formats, especially no-space or lowercase.

### **Fix:**  
Use a more inclusive pattern:
```js
const postcodeRegex = /^[A-Z]{1,2}[0-9][0-9A-Z]?\s?[0-9][A-Z]{2}$/i;
```

- This allows lowercase, optional space, and all valid postcode structures

---

## ‚úÖ 3. **Improve Error Messaging with Examples**

### **Where:**  
In `findAddress()` where you show error messages for blank or invalid postcodes

### **Current:**
```js
$('#postcode-format-error').show();
// "Postcode should be 5 to 8 characters..."
```

### **Fix:**
Update text to:
```html
<span class="govuk-visually-hidden">Error:</span> Enter a valid postcode, for example SW1A 1AA
```

And update `.innerText` or `.html()` in JS where appropriate to reflect this.

Also make sure `aria-describedby="postcode-format-error postcode-hint"` is applied to the input.

---

## ‚úÖ 4. **Replace `<select>` with radio buttons in `postcodeSuccess()`**

### **Where:**  
Inside `postcodeSuccess()` function where you create dropdown options

### **Issue:**  
GOV.UK recommends **radios instead of `<select>`** for address lists (better for accessibility and readability)

### **Fix:**
Instead of building `<option>` tags:
```js
postcodeList[i + 1] = '<option value="' + i + '">' + address + '</option>';
```

Generate radio button HTML:
```js
postcodeList[i + 1] = `
  <div class="govuk-radios__item">
    <input class="govuk-radios__input" type="radio" id="address-${i}" name="AddressFromPostcode" value="${i}">
    <label class="govuk-label govuk-radios__label" for="address-${i}">${address}</label>
  </div>`;
```

Also wrap with:
```html
<fieldset class="govuk-fieldset" aria-describedby="select-address-hint">
  <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">Select an address</legend>
  <div class="govuk-radios" id="AddressFromPostcode">
    <!-- insert radios here -->
  </div>
</fieldset>
```

Then in JS, replace:
```js
$(postcodeSelector).append(postcodeList[i]);
```

With:
```js
$('#AddressFromPostcode').append(postcodeList[i]);
```

---

## ‚úÖ 5. **Fix inconsistent error class application**

### **Where:**  
Inside various `if` blocks for errors in `findAddress()` and `commitAddress()`

### **Issue:**  
Missing `removeClass()` calls when clearing errors ‚Äî so previous errors sometimes persist.

### **Fix:**  
Ensure that in all branches where validation passes:
```js
$('#postcode').removeClass("govuk-input--error");
$('#postcode-format-error').hide();
$('#postcode-error').hide();
$('.govuk-error-summary').hide();
```

Same for `addressSelector`:
```js
$("#addressSelector").removeClass("govuk-form-group--error");
$("#select-address-error").hide();
```

---

## ‚úÖ 6. **Ensure all error messages use `govuk-visually-hidden` prefix**

### **Why:**  
This ensures screen readers announce the word **"Error:"** properly

### **Fix:**  
Ensure all `.innerHTML` updates for errors include:
```html
<span class="govuk-visually-hidden">Error: </span>
```

---

## ‚úÖ Summary of Code Fixes

| Fix | Where | Why |
|-----|-------|-----|
| Normalize postcode input | `findAddress()` | Accept lowercase, trim spaces, consistent backend lookup |
| Improve postcode regex | Global (early in JS) | Allow valid UK postcode formats |
| Improve error messages | `findAddress()` | Better feedback, accessibility |
| Replace `<select>` with radios | `postcodeSuccess()` | Compliant with GOV.UK address lookup pattern |
| Remove error classes and summaries on success | All validation paths | Avoid residual validation errors |
| Prefix all error messages with `govuk-visually-hidden` | All `.innerHTML` / `text()` updates | Screen reader accessibility |

---

Let me know if you'd like help implementing the radio replacement structure directly, or if you want to switch over to the [HMRC address lookup microservice](https://github.com/hmrc/address-lookup-frontend) for better compliance and fewer custom builds.


Absolutely ‚Äî here‚Äôs a clear breakdown of **postcode regex validation** for both your **current** and the **recommended (improved)** version, with **real-world examples**.

---

## üîç **Current Regex in Your Code**
```js
const postcodeRegex = new RegExp(/^([A-Za-z]{1,2}[\d]{1,2}[A-Za-z]?)([\s]?)+([\d][A-Za-z]{2})$/);
```

### ‚ùå Issues:
- Expects a specific split of parts, with optional space
- Doesn‚Äôt support:
  - Lowercase input
  - Certain valid postcode formats (e.g. `GIR 0AA`, `BS1 4RU`)
- Fails silently on slightly malformed but fixable input

---

### ‚ùå Invalid Examples with Your Current Regex:

| Input        | Expected Outcome | Why |
|--------------|------------------|-----|
| `bs1 4ru`     | ‚ùå Invalid         | Lowercase |
| `BS14RU`      | ‚ùå Invalid         | No space |
| `BS1     4RU` | ‚ùå Invalid         | Multiple spaces |
| `GIR 0AA`     | ‚ùå Invalid         | Non-standard but valid postcode |

---

## ‚úÖ **Recommended UK Postcode Regex**
```js
const postcodeRegex = /^[A-Z]{1,2}[0-9][0-9A-Z]?\s?[0-9][A-Z]{2}$/i;
```

### ‚úÖ Benefits:
- Allows:
  - Optional space (`AB1C1DE` or `AB1 C1DE`)
  - Lowercase or uppercase (`i` flag)
  - All valid postcode patterns including special ones (`GIR 0AA`)
- Follows [official UK postcode rules](https://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom#Formatting)

---

### ‚úÖ Examples This Regex Will Accept:

| Input        | Format       | Valid? |
|--------------|--------------|--------|
| `BS1 4RU`     | Standard     | ‚úÖ |
| `BS14RU`      | No space     | ‚úÖ |
| `bs1 4ru`     | Lowercase    | ‚úÖ |
| `GIR 0AA`     | Special case | ‚úÖ |
| `W1A 0AX`     | London       | ‚úÖ |
| `M1 1AE`      | Manchester   | ‚úÖ |
| `EC1A1BB`     | No space     | ‚úÖ |
| `ec1a 1bb`    | Lowercase    | ‚úÖ |
| `SW1A     2AA`| Excess spaces| ‚ùå (You should `.replace(/\s+/g, ' ')` or trim first) |

---

## ‚úÖ Recommended Normalization (before regex match)
Before matching:
```js
let input = postcodeInput.val().trim().toUpperCase().replace(/\s+/g, '');
```

Then:
```js
const formatted = input.slice(0, -3) + ' ' + input.slice(-3); // insert standard space
postcodeRegex.test(formatted);
```

This ensures the input is always matched in a **normalized, expected format**, regardless of how the user typed it.

---

### ‚úÖ Summary

| Version | Regex | Accepts Lowercase | Accepts No Space | GOV.UK Compliant |
|--------|--------|-------------------|------------------|------------------|
| Current | `/^([A-Za-z]{1,2}[\d]{1,2}[A-Za-z]?)([\s]?)+([\d][A-Za-z]{2})$/` | ‚ùå | ‚ùå | ‚ùå |
| Recommended | `/^[A-Z]{1,2}[0-9][0-9A-Z]?\s?[0-9][A-Z]{2}$/i` | ‚úÖ | ‚úÖ | ‚úÖ |

Let me know if you want a helper function to automatically **normalize and validate** a postcode from raw input ‚Äî I can provide a plug-and-play snippet.





Great ‚Äî let's walk through **exactly where** you should make the **postcode regex, normalization, and validation changes** based on your **Address Lookup flow** and **Manual Address Entry** logic.

---

## ‚úÖ PART 1: **Where to Apply Postcode Fixes**

---

### üîß 1. `findAddress()` ‚Äî Lookup Entry Point

#### **What to fix:**
- Normalize input (`trim`, `uppercase`, `remove extra spaces`)
- Replace the regex with the GOV.UK compliant one

#### ‚úÖ Changes:
```js
let rawPostcode = $('#postcode').val().trim();
let normalized = rawPostcode.toUpperCase().replace(/\s+/g, '');
let formatted = normalized.slice(0, -3) + ' ' + normalized.slice(-3);

const postcodeRegex = /^[A-Z]{1,2}[0-9][0-9A-Z]?\s?[0-9][A-Z]{2}$/i;

if (!postcodeRegex.test(formatted)) {
  // show error
}
```

---

### üîß 2. `postcodeSearchWithPluginFetch(postcode)` ‚Äî API fetch

#### **What to fix:**
- Pass the **normalized postcode** to backend (or formatted if needed)

#### ‚úÖ Change:
```js
resolve(formatted); // use consistent format for lookup
```

---

### üîß 3. `postcodeSuccess()` ‚Äî showing selected postcode

#### **What to fix:**
- Display the formatted postcode back in UI for user confirmation

#### ‚úÖ Change:
```js
document.getElementById("pc-success").innerText = formatted;
```

---

### üîß 4. `commitAddress()` ‚Äî validation when user selects from dropdown (or radios)

#### **What to fix:**
- Validate if a selection was made
- No change to postcode regex here directly ‚Äî it's indirectly tied to selection success
- ‚úÖ Make sure to **clear previous postcode errors** if successful

---

## ‚úÖ PART 2: **Manual Address Entry (`manualAddressVal`)**

You have a separate postcode field for manual entry.

---

### üîß 5. `manualAddressVal()` ‚Äî Postcode field validation

#### **What to fix:**
- Normalize user input
- Replace regex
- Improve error message with example

#### ‚úÖ Code to add:
```js
let rawManualPostcode = $("#postcode").val().trim();
let normManualPostcode = rawManualPostcode.toUpperCase().replace(/\s+/g, '');
let formattedManualPostcode = normManualPostcode.slice(0, -3) + ' ' + normManualPostcode.slice(-3);

const postcodeRegex = /^[A-Z]{1,2}[0-9][0-9A-Z]?\s?[0-9][A-Z]{2}$/i;

if (!postcodeRegex.test(formattedManualPostcode)) {
  obj.inputs[6].isValid = false;
  obj.inputs[6].errorMessage = "Enter a valid postcode, for example SW1A 1AA";
  document.getElementById(`${obj.inputs[6].id}-error`).innerHTML =
    `<span class="govuk-visually-hidden">Error: </span>${obj.inputs[6].errorMessage}`;
}
```

---

## ‚úÖ Summary Table: Where to Apply Postcode Logic Changes

| Function | Location | What to Fix |
|----------|----------|-------------|
| `findAddress()` | Lookup entry | Normalize + new regex |
| `postcodeSearchWithPluginFetch()` | Lookup fetch | Use formatted postcode |
| `postcodeSuccess()` | Postcode confirm | Show normalized postcode |
| `manualAddressVal()` | Manual entry validation | Normalize + regex + hint message |
| `commitAddress()` | Address selection | Ensure errors clear if selected |

---

## üìå Don't Forget

- Add `aria-describedby="postcode-hint postcode-format-error"` to your postcode `<input>` elements
- Update your hint/error message in HTML to:
```html
<p id="postcode-format-error" class="govuk-error-message" style="display:none">
  <span class="govuk-visually-hidden">Error:</span> Enter a valid postcode, for example SW1A 1AA
</p>
```

---

Would you like me to help you rewrite and refactor the updated `findAddress()` and `manualAddressVal()` functions with these changes baked in?
