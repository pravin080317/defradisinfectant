We have investigated the issue related to the duplicated address lines observed in the Portal Request Submissions from Telford and Wrekin. Upon review, we have identified a technical issue within the Front Door integration logic.

Summary of the issue:

The system currently merges address details from two sources (BS7666 schema and fallback text-based address lines) when generating Portal Request Submission records.

In some cases, both sources contain overlapping address information, which results in duplicated or partially repeated address lines being displayed on the Portal Submission view.

Current Impact:

The submissions are still being validated and processed successfully.

However, address data may appear duplicated on the portal screen, which could cause confusion for users reviewing these records.

Next Steps:

A fix is currently being planned to refine how address data is merged, ensuring clean and accurate address formatting.





Title:
Duplicate Address Lines in Portal Request Submission due to BS7666 and TextAddress Merge

Description:
Issue Summary: When users submit cases via the LA Portal, address lines in "Portal Request Submission" records sometimes display duplicated or partially repeated address values.

Examples Observed:

Address Line 2: "LEAHAYS WAY ALLSCOTT 55"

Address Line 3: "IRONBRIDGE ROAD MADELEY IRONBRIDGE ROAD MADELEY"

Root Cause:

The Front Door Integration Azure Function responsible for creating Portal Request Submission records is merging both BS7666 schema values and fallback TextAddress values into the same address fields.

The logic currently appends secondary address lines (2a, 3a) into the main lines (2, 3), causing duplication when both BS7666 and TextAddress contain similar data.

Business Impact:

Incorrect address display for LA portal users and CT Registration teams.

Increased manual effort and confusion for downstream teams validating address data.

Next Steps:

Refactor Azure Function logic:

Prioritize BS7666 address fields when available.

Only fallback to TextAddress when BS7666 is missing.

Avoid appending additional address fragments unnecessarily.

Validate the changes in SIT and plan deployment to production.







Analysis of the code for the Address Duplication Issue:
Where the duplication happens:
The issue of address duplication does lie within this plugin, specifically within this section:

csharp
Copy
Edit
string primaryAddressLine1 = propertyIdentityBS7666AddressLine1.EnsureEmptyAsNull() ?? propertyIdentityAddressLine1;
string primaryAddressLine2 = propertyIdentityBS7666AddressLine2.EnsureEmptyAsNull() ?? propertyIdentityAddressLine2;
string primaryAddressLine2a = propertyIdentityBS7666AddressLine2a.EnsureEmptyAsNull() ?? propertyIdentityAddressLine2a;
string primaryAddressLine3 = propertyIdentityBS7666AddressLine3.EnsureEmptyAsNull() ?? propertyIdentityAddressLine3;
string primaryAddressLine3a = propertyIdentityBS7666AddressLine3a.EnsureEmptyAsNull() ?? propertyIdentityAddressLine3a;
string primaryAddressLine4 = propertyIdentityBS7666AddressLine4.EnsureEmptyAsNull() ?? propertyIdentityAddressLine4;
Followed by:

csharp
Copy
Edit
portalRequestSubmissionToCreate.Attributes["voa_addressline2"] = primaryAddressLine2.AppendSafe(primaryAddressLine2a);
portalRequestSubmissionToCreate.Attributes["voa_addressline3"] = primaryAddressLine3.AppendSafe(primaryAddressLine3a);
Root Cause:
The issue is coming from the AppendSafe(primaryAddressLine2a) and AppendSafe(primaryAddressLine3a) logic.

Both BS7666 values and fallback TextAddress values are being merged together.

In many cases, both BS7666 and TextAddress fields contain similar or overlapping data, resulting in duplicates like:

mathematica
Copy
Edit
Address Line 2 = "LEAHAYS WAY ALLSCOTT" + "55"
Address Line 3 = "LEAHAYS WAY" + "LEAHAYS WAY ALLSCOTT"
Why it happens:
BS7666 schema is trying to break addresses into SAON, PAON, Street Description, Locality, Post Town etc.

TextAddress on the other hand is free text like "55 LEAHAYS WAY ALLSCOTT TELFORD".

When you combine BS7666 + TextAddress for each line (via fallback ?? and AppendSafe logic), you are doubling data in address lines.

Suggested Fix:
Approach 1 - Prioritize BS7666 OR TextAddress (Recommended):
If BS7666 fields are present (e.g., SAON, PAON, Street Description), use only BS7666-derived values.

If BS7666 fields are null/empty, fallback to TextAddress lines.

Suggested code refactor:
csharp
Copy
Edit
bool isBS7666Available = !string.IsNullOrEmpty(propertyIdentityBS7666AddressLine1) 
                      || !string.IsNullOrEmpty(propertyIdentityBS7666AddressLine2) 
                      || !string.IsNullOrEmpty(propertyIdentityBS7666AddressLine3);

if (isBS7666Available)
{
    // Use only BS7666
    primaryAddressLine1 = propertyIdentityBS7666AddressLine1;
    primaryAddressLine2 = propertyIdentityBS7666AddressLine2;
    primaryAddressLine3 = propertyIdentityBS7666AddressLine3;
    primaryAddressLine4 = propertyIdentityBS7666AddressLine4;
}
else
{
    // Use fallback text address lines
    primaryAddressLine1 = propertyIdentityAddressLine1;
    primaryAddressLine2 = propertyIdentityAddressLine2;
    primaryAddressLine3 = propertyIdentityAddressLine3;
    primaryAddressLine4 = propertyIdentityAddressLine4;
}

// Save without appending
portalRequestSubmissionToCreate.Attributes["voa_addressline1"] = primaryAddressLine1;
portalRequestSubmissionToCreate.Attributes["voa_addressline2"] = primaryAddressLine2;
portalRequestSubmissionToCreate.Attributes["voa_addressline3"] = primaryAddressLine3;
portalRequestSubmissionToCreate.Attributes["voa_addressline4"] = primaryAddressLine4;
Approach 2 - Keep appending but normalize (Less recommended)
Instead of a hard switch, you could de-duplicate inside AppendSafe() so if BS7666 line 2 = TextAddress line 2a, only one gets added.

Conclusion:
Yes, the duplication is on the plugin side, specifically in the address line assembly logic before portal submission creation.

Fixing it will require restructuring how the plugin prioritizes BS7666 vs TextAddress data.
