Absolutely ‚Äî here's a breakdown of the **entire effort** from start to finish as **JIRA tasks**, grouped logically and written in proper JIRA format.

---

## üîß JIRA Task Breakdown for "Submitted Reports ‚Äì Performance Optimization & Pagination"

---

### **Task 1: Refactor FetchXML to Implement Server-Side Paging**

**Title:**
Implement paged FetchXML for submitted reports listing

**Description:**
Refactor the `voap_portalrequest` FetchXML query to support server-side paging using the `count` and `page` attributes.

* Set `count=20`
* Use `page={{ request.querystring.page }}`
* Ensure ordering is applied on `createdon`
* Confirm results are paged correctly in portal
* Drop client-side filtering logic if any

---

### **Task 2: Remove Per-Row FetchXML for Supporting Documents**

**Title:**
Eliminate per-row attachment FetchXML and use aggregate count in main query

**Description:**
Improve performance by removing the nested FetchXML that ran per row to count `voap_portalfilemanagement` records.
Instead, include a `link-entity` in the main `voap_portalrequest` FetchXML using `aggregate="countcolumn"` to retrieve the supporting documents count.

* Add `link-entity` with filter on required `statuscode` values
* Alias the count result as `supportingDocumentsCount`
* Confirm correct values are returned in FetchXML Builder

---

### **Task 3: Update Liquid Code to Display Attachment Count**

**Title:**
Update Liquid table rendering logic to use supportingDocumentsCount

**Description:**
Update the table rendering logic to use the new `supportingDocumentsCount` value from the paged aggregate query.

* Replace references to `attachments.results.entities.size` with `result.supportingDocumentsCount`
* Adjust "Add documents" or "View supporting documents" link logic accordingly
* Test edge cases (0 vs 1+ docs)

---

### **Task 4: Add Total Count FetchXML for Pagination Logic**

**Title:**
Add total count FetchXML to support pagination calculation

**Description:**
Introduce a lightweight `aggregate="count"` FetchXML to get the total number of submitted reports for the logged-in user's BA code.

* Add alias `totalCount`
* Use it in Liquid to calculate total pages
* Store as `totalRecords`, compute `totalPages = totalRecords / pageSize`

---

### **Task 5: Implement GOV.UK Style Numbered Pagination UI**

**Title:**
Implement numbered pagination component in GOV.UK format

**Description:**
Build pagination controls using GOV.UK Design System styles, including:

* `Previous` and `Next` buttons
* Current page highlighting
* Max of 5 numbered links
* `?page=N` parameter for navigation
* Conditional logic to disable prev/next on edges

---

### **Task 6: Validate Pagination Behavior Across Pages**

**Title:**
Test pagination and data consistency across multiple pages

**Description:**
Manually test pagination behavior to confirm:

* Records change correctly across pages
* Attachment count is accurate per row
* Sorting works within the current page
* Accessibility remains intact (ARIA labels, visible focus)
* Links open correct report detail or upload pages

---

### **Task 7: Review Accessibility and ARIA Compliance**

**Title:**
Review pagination component for accessibility compliance

**Description:**
Ensure the pagination controls follow WCAG and GOV.UK guidelines:

* `aria-label` for nav and links
* `aria-current="page"` for selected page
* Logical tab order
* Sufficient contrast and keyboard accessibility

---

## üìù Optional Story (Epic/Parent)

**Title:**
Improve performance and accessibility of "Submitted Reports" page

**Description:**
This epic covers performance, usability, and accessibility improvements to the ‚ÄúSubmitted Reports‚Äù table in the Power Pages portal. The enhancements include server-side paging, document count optimization, and a compliant GOV.UK-style pagination interface.

---

Let me know if you want:

* Tasks grouped into a story/epic
* Linked sub-tasks or estimated effort
* Excel/CSV exportable format
* Uploadable JIRA JSON format

Happy to tailor based on your JIRA setup.
