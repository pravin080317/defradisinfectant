Plugin Overview:
PreAnnotationCreate : IPlugin

Key Responsibilities of Plugin:
Triggered on creation of annotation (notes) entity (pre-operation).

Checks if the file is related to the voap_portalfilemanagement table.

Prepares the file for SDES upload:

Reads metadata (filename, mimetype, document body).

Converts the document body (base64 encoded file content) to a byte array.

Renames the file and calls FileUploadHelper.AttemptFileUpload().

Inside FileUploadHelper.AttemptFileUpload():
Prepares metadata for SDES API (account info, filename, filesize, etc.).

Calls SDESServiceController.NotifyFile() to get upload URL.

Uploads file using SDESServiceController.UploadFile() by posting to SDES API.

Blank out file content in Dataverse (for security reasons).

Where is the Issue?
Current Implementation:

It is treating any uploaded file as a single binary stream.

It reads the content from annotation.documentbody (base64 string) and uploads the entire file as-is to SDES.

This means if you upload an .msg or .eml file with attachments, it uploads only the .msg/.eml file itself but does not inspect or extract internal attachments from it.

What is missing?
The plugin does not parse the contents of .msg or .eml files to identify and extract embedded attachments.

There is no logic in place to handle MIME structure parsing to separate attachments from the email body.

The plugin uploads the whole email file (including attachments embedded inside) as a flat binary file, so SDES only receives the email file, not its child attachments as individual files.

Conclusion:
âœ… The issue is plugin-side, not SDES-side.

SDES is correctly receiving whatever binary payload is sent by the plugin.

The plugin simply takes the uploaded note/annotation (email or file) and sends it as one binary.

Recommendation:
You will need to:

Enhance this plugin (before calling AttemptFileUpload()):

Add MIME or MSG parser logic to extract attachments inside .msg/.eml.

Loop through extracted files and create separate annotation records for each attachment or bundle them separately for SDES.

Or implement a helper class to preprocess .msg/.eml files and break them into:

Main email content.

Child attachments.



Title: Spike: Analyze and Enhance PreAnnotationCreate Plugin for Email Attachments Handling

Description:
Currently, when users upload email files (e.g., .msg or .eml) as evidence, only the parent email file is uploaded to SDES. Embedded attachments inside the email are not extracted or processed.

Objectives:
Analyze the current PreAnnotationCreate plugin and FileUploadHelper.AttemptFileUpload() to understand how the file is processed.

Determine if the plugin is capable of parsing email files to extract attachments.

Explore C# libraries (e.g., MimeKit, MsgReader) for extracting attachments from .msg or .eml files.

Identify the appropriate place in the plugin workflow to extract and process attachments before uploading to SDES.

Assess how extracted attachments should be managed:

As separate annotations.

Or grouped into a batch for SDES.

Deliverables:
Technical analysis report.

Tool/library recommendation for email parsing.

Suggested implementation strategy.

Risk assessment and dependencies.
