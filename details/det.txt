Here is the breakdown of **update APIs**, each tied to specific actions in SVT (e.g. changing source, condition score, or final decision), with **Reval Sale ID** and **Task ID** passed in each request. This follows your update pattern via API (typically PATCH or POST).

---

### ðŸ”„ **SVT Update API Endpoints â€“ Action-Wise Breakdown**

| **Action**                            | **Method** | **Endpoint Path**                            | **Description**                                                                          | **Required Inputs**                        |
| ------------------------------------- | ---------- | -------------------------------------------- | ---------------------------------------------------------------------------------------- | ------------------------------------------ |
| âœ… Update Source Flag                  | `PATCH`    | `/reval-sales/{revalSaleId}/source`          | Updates the main source (e.g. switch from WLTT to LRPPD) used in decision-making.        | `taskId`, `revalSaleId`, `newSource`       |
| ðŸŸ¨ Update Condition Score             | `PATCH`    | `/reval-sales/{revalSaleId}/condition-score` | Sets or modifies the condition score for the selected sale.                              | `taskId`, `revalSaleId`, `scoreValue`      |
| ðŸ§¾ Update Decision Outcome            | `PATCH`    | `/reval-sales/{revalSaleId}/decision`        | Applies final verification decision (e.g. useful, not useful), reason code, and remarks. | `taskId`, `revalSaleId`, `decisionPayload` |
| ðŸŸª Update Remarks Only                | `PATCH`    | `/reval-sales/{revalSaleId}/remarks`         | Updates caseworker or QA remarks separately.                                             | `taskId`, `revalSaleId`, `remarksText`     |
| ðŸ”„ Update Outlier Info + Ratio Audit  | `PATCH`    | `/reval-sales/{revalSaleId}/outlier-info`    | Captures outlier flag (true/false) and its numeric ratio; stores in audit.               | `taskId`, `revalSaleId`, `flag`, `ratio`   |
| ðŸ§© Update Final Outcome & Lock Record | `POST`     | `/svt-tasks/{taskId}/finalise-outcome`       | Finalises outcome (locked), triggers downstream integration if QA passed.                | `taskId`, `revalSaleId`, outcome fields    |

---

### ðŸ§  Notes:

* `taskId` is used to ensure audit traceability and job linkage.
* These should be idempotent where possible (use `requestId` for deduplication).
* For transactional consistency, PATCH endpoints should be atomic per field-set.
* The finalisation endpoint (`/finalise-outcome`) can include logic for:

  * Write to SV Outcome
  * Lock record from edits
  * Trigger downstream sync (to DAL/DAP2)

---

Let me know if you want PowerFx examples or Swagger-style specs for these!
