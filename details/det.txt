Got it — we’ll keep **sales data only in DAP2**, and **Dataverse will only store Tasks** for allocation and tracking.
No historical migration for this ROM.

Here’s the **ROM breakdown** for the “Data Ingestion & Output Integration” user story with that assumption:

---

## **ROM – Data Ingestion & Output Integration (Tasks in Dataverse, Sales Data in DAP2)**

### **Scope**

* Daily scheduled ingestion of **Reval Sales Records** (Outlier = Yes) from DAP2.
* Create corresponding **Task** records in Dataverse for each outlier sale.
* Link Task GUID to the corresponding sale in DAP2 (for UI navigation / tracking).
* Push verification outcomes from Dataverse back to DAP2 when a Task is completed.
* No local storage of sales data in Dataverse.

---

### **1. Components**

| Component                                  | Role                                                         |
| ------------------------------------------ | ------------------------------------------------------------ |
| **DAP2 API**                               | Source of truth for sales data (GET Outliers, POST Outcomes) |
| **Custom Connector**                       | Secure interface between Power Platform and DAP2 APIs        |
| **Power Automate (Scheduled Flow)**        | Orchestration of daily ingestion & Task creation             |
| **Dataverse Task Table (ActivityPointer)** | Stores Tasks for allocation & tracking                       |
| **Dataverse Plugin / Power Automate**      | Trigger outcome push when Task is completed                  |
| **Model-driven App (Tasks)**               | For Team Manager to view & assign                            |
| **Canvas Page (in SVT UI)**                | Displays Tasks & links to DAP2 detail page                   |

---

### **2. Processes**

#### **A. Daily Ingestion**

1. **Trigger** – Power Automate scheduled flow runs daily (e.g., 02:00).
2. **Get Outliers** – Custom Connector calls DAP2:

   ```
   GET /revalsalesrecords?outlier=yes&date=yyyy-mm-dd
   ```
3. **Create Tasks** in Dataverse:

   * Subject: `SVT Verification – {SaleId}`
   * Description: `Address: {Address}, UARN: {UARN}`
   * Status: Open
   * Owner: Unassigned (or default Team Manager)
   * Custom Field: `SaleId` (DAP2 reference)
4. **Update DAP2** with Task GUID:

   ```
   PATCH /revalsalesrecords/{SaleId} { "taskId": "{TaskGUID}" }
   ```

#### **B. Outcome Push**

1. **Trigger** – Task status changes to “Completed” in Dataverse.
2. **Get Outcome Data** – Plugin/Flow reads from linked SV Outcome table or Task fields.
3. **Send to DAP2**:

   ```
   POST /svoutcomes
   {
     "saleId": "{SaleId}",
     "taskId": "{TaskGUID}",
     "decision": "{Pass/Fail/Other}",
     "remarks": "{Remarks}",
     "conditionScore": "{Score}",
     "sourceChanged": true/false
   }
   ```

---

### **3. Integrations**

* **DAP2 → Power Platform**:

  * GET Outlier sales list (read-only)
  * PATCH sale with Task GUID
* **Power Platform → DAP2**:

  * POST outcome data
* **Dataverse**:

  * Task table CRUD (standard entity)
  * Plugin on Task status change

---

### **4. Security**

* **DAP2 API** via APIM secured with OAuth2 client credentials.
* **Dataverse role-based access control**:

  * Case Worker: Read/update assigned Tasks only
  * Team Manager: Read/update all Tasks, reassign

---

### **5. Dependencies**

* **DAP2 API endpoints**:

  * `GET /revalsalesrecords`
  * `PATCH /revalsalesrecords/{id}`
  * `POST /svoutcomes`
* Service account for Power Automate to call DAP2 via APIM.
* Network access between Power Platform and DAP2 API.
* Agreement on Task GUID field in DAP2 schema.

---

### **6. ROM Effort Estimate**

| Area                                                   | Estimated Effort |
| ------------------------------------------------------ | ---------------- |
| **Custom Connector Setup (DAP2)**                      | 2–3 days         |
| **Power Automate Flow (Daily ingestion)**              | 3–4 days         |
| **Dataverse Task creation & mapping**                  | 2 days           |
| **Outcome push automation (Flow/Plugin)**              | 3–4 days         |
| **Model-driven app Task view & permissions**           | 2–3 days         |
| **Canvas page integration (Task list & open in DAP2)** | 4–5 days         |
| **Testing & UAT**                                      | 5–7 days         |
| **Total**                                              | \~3.5–4 weeks    |

---

If you want, I can next **map this story into a sequence diagram** so it’s clear exactly how **DAP2, Power Automate, Dataverse, and the SVT UI** interact step-by-step. That would make the ROM airtight for approvals.

Do you want me to prepare that diagram now?
