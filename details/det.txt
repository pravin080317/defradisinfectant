Core Topic:
The discussion is about how to present scheduling data (that currently exists as a static PDF document) on the LA Portal. Two approaches are discussed:

1st Approach: Static Table Implementation
Objective: Convert the PDF schedule into a Dataverse table and display it as an HTML page in the portal.

Steps:

Manually extract schedule data from the PDF document.

Create a new custom table (entity) in Dataverse with attributes like:

Schedule Name

Start Date

End Date

Description / Notes

Recurrence / Type (if applicable)

Populate this table with static data.

Build an HTML/Power Pages UI to display this table dynamically to users.

Pros:

Easy to implement.

Fully under the portal team’s control.

Quick win for MVP/static version.

Cons:

Requires manual updates when the schedule changes.

No automation, no real-time status or logic-driven updates.

2nd Approach: Dynamic Schedule Engine Integration
Objective: Integrate with a dynamic "Schedule Engine" designed by the Case Management team, which automatically calculates and updates schedules based on pre-defined business logic.

Features of Schedule Engine:

Auto-generates next run schedules based on criteria like "run every 15 days."

Captures:

When was the last schedule run?

When is the next due date?

What schedule type/parameters were used?

Data lives in Dataverse tables maintained by another team (Case Management).

Frontend Work:

Build Power Pages/HTML UI to read from the dynamic schedule tables.

Display dynamic and real-time schedule information to users.

Potentially format or process data for user-friendly display (e.g., transforming backend timestamps or codes to readable values).

Pros:

Real-time data, no manual intervention.

Improves UX with current and accurate scheduling details.

Scalable and future-proof (no reliance on static documents).

Cons:

Dependency on the Case Management team to finalize and stabilize the Schedule Engine and data model.

More complex integration effort.

Decision Factors:
If Schedule Engine is delayed/not production-ready, fallback to the static table option for MVP.

If Schedule Engine is available soon, skip static implementation and directly integrate with the dynamic system.

Additional Notes:
Both solutions are UI/UX focused but differ in backend logic and maintainability.

The second option is more like a real-time dashboard approach.





Title:
Spike: Analysis and Design for LA Portal Schedule Display (Static Table vs. Dynamic Schedule Engine)

Description:
The purpose of this spike is to investigate and design the best approach to display scheduling information on the LA Portal. There are two options under consideration:

Static Table Implementation:

Extract the current PDF document containing the yearly schedule information.

Create a custom Dataverse table to store this information.

Build an HTML/Power Pages page to display the static schedule data on the portal.

Dynamic Schedule Engine Integration:

Analyze the existing “Schedule Engine” being developed by the Case Management team.

Understand its data model, logic, and automation.

Plan to integrate the portal UI with this engine to display real-time schedule information, including last run, next run, and other meta-data.

Scope of this Spike:
Understand current and target state for the scheduling information.

Collaborate with Case Management team to gather information on the Schedule Engine readiness.

Define the technical design and effort estimation for both solutions.

Recommend one solution based on business priority, technical feasibility, and timeline.

Acceptance Criteria:
Documented comparison between static and dynamic solutions.

Draft UI mock-up or flow for the chosen approach.

List of dependencies (e.g., other teams, data models).

Recommendation documented for stakeholder approval.
