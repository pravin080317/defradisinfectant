Absolutely ✅ — below is the **updated Jira task breakdown** for your **POC sprint** implementing the **Hybrid (Option 2) Welsh translation model**, reflecting the refined table design (with `PageUrl`, `ContentKey`, `EnglishContentId`, and `WelshContent`).

You can copy-paste this directly into Jira (Epic → Stories → Tasks), or I can also format it as an importable CSV if needed.

---

## 🧩 **Epic: Welsh Translation – Hybrid Dataverse POC (Option 2)**

**Goal:**
Demonstrate bilingual content handling in Power Pages by keeping English content within existing web pages/templates and dynamically retrieving Welsh text from a Dataverse table (`WelshTranslations`) using `PageUrl` and `ContentKey` mapping.

---

### **Story 1 – Dataverse Schema and Security Configuration**

**Objective:** Create a Dataverse table and supporting components to store Welsh content against each page section.

**Tasks:**

1. **Create Dataverse Table – `WelshTranslations`**

   * Columns:

     * `PageUrl` (Text, 250)
     * `PageName` (Text, 100)
     * `ContentKey` (Text, 100)
     * `EnglishContentId` (Text, 100)
     * `WelshContent` (Multiline Text, HTML)
     * `ContentType` (Choice: Text, HTML, Label, JS Message)
     * `SectionName` (Text, 100)
     * `IsActive` (Boolean)
     * `LastUpdatedBy`, `LastUpdatedOn`
   * Add indexes on `PageUrl` and `ContentKey`.

2. **Configure Table Permissions**

   * Portal web roles: Read-only access to `WelshTranslations`.
   * Editor role: Full CRUD (Model-driven app access).

3. **Create Model-driven App for Editors**

   * Simple editor form showing: `PageUrl`, `ContentKey`, `WelshContent (Rich Text Editor)`, `IsActive`.
   * Add a Power Automate flow to notify reviewers when a record is modified.

---

### **Story 2 – Power Pages Configuration and Reference Setup**

**Objective:** Add reference markers in Power Pages and enable API access.

**Tasks:**

1. **Add `data-i18n-id` Attributes**

   * Tag content blocks in 3–5 sample pages (Home, Dashboard, Footer).
   * Example:

     ```html
     <h1 data-i18n-id="header-title">Local Authority Portal</h1>
     ```

2. **Maintain Naming Convention**

   * `data-i18n-id` format: `<page>-<section>-<element>` (e.g., `home-header-title`).

3. **Enable Portal Web API Access**

   * Grant API read permissions for `WelshTranslations`.
   * Validate endpoint:
     `/api/data/v9.2/welshtranslations?$filter=pageurl eq '/dashboard'`.

4. **Add Feature Flag (Site Setting)**

   * `Site/WelshTranslationEnabled = true`.

---

### **Story 3 – Client-side Integration (JS / Liquid)**

**Objective:** Fetch and render Welsh text dynamically on user toggle.

**Tasks:**

1. **Develop Toggle Component**

   * Add “Cymraeg / English” toggle to header.
   * Store user preference in `localStorage` (e.g., `"preferredLanguage": "cy"`).

2. **Implement Fetch and Replace Logic**

   * On page load or toggle:

     ```js
     fetch(`/api/data/v9.2/welshtranslations?$filter=pageurl eq '${window.location.pathname}'`)
       .then(r => r.json())
       .then(data => {
         data.value.forEach(item => {
           const el = document.querySelector(`[data-i18n-id="${item.contentkey}"]`);
           if (el && item.welshcontent) el.innerHTML = item.welshcontent;
         });
         document.documentElement.lang = "cy";
       });
     ```
   * Cache Welsh data in `sessionStorage` to reduce repeat API calls.

3. **Add Fallback and Error Handling**

   * If record not found, retain English.
   * Log missing `ContentKey` values to console or Application Insights.

4. **Update `<html lang>` Attribute**

   * Switch between `en` and `cy` dynamically for accessibility.

---

### **Story 4 – Sample Content Creation and Testing**

**Objective:** Populate Welsh entries in Dataverse and validate bilingual rendering.

**Tasks:**

1. **Populate Sample Data**

   * For 10–15 blocks (header, footer, form labels).
   * Example record:

     | PageUrl      | ContentKey     | EnglishContentId | WelshContent                       |
     | ------------ | -------------- | ---------------- | ---------------------------------- |
     | `/dashboard` | `header-title` | `header-title`   | `<h1>Porth yr Awdurdod Lleol</h1>` |

2. **Functional Testing**

   * Verify toggle behavior and content switching.
   * Confirm fallback to English for missing keys.

3. **Accessibility Testing**

   * Validate `<html lang>` switch, screen reader output, and color contrast.

4. **Performance Verification**

   * Measure Dataverse Web API response time (<200 ms expected).
   * Confirm smooth DOM update and no layout shifts.

---

### **Story 5 – Documentation and Demo**

**Objective:** Record outcomes and lessons learned for future rollout.

**Tasks:**

1. **Document POC Architecture**

   * Include Dataverse schema, API flow, and JS replacement logic.
2. **Create Demo Screenshots / Recording**

   * Show English → Welsh switch in real time.
3. **List Improvement Opportunities**

   * e.g., caching, Power Automate bulk import, or admin dashboard.
4. **Handover to Architecture Review Board**

   * Present findings and readiness for full-scale rollout.

---

### **📆 Sprint Timeline (2 Weeks)**

| Phase                  | Duration | Owner        | Outcome                     |
| ---------------------- | -------- | ------------ | --------------------------- |
| Dataverse Setup        | 2 days   | Dev / Admin  | Table + Security configured |
| Portal Setup           | 2 days   | Portal Dev   | HTML markers + API enabled  |
| JS Integration         | 3 days   | Frontend Dev | Toggle & render working     |
| Content Load & Testing | 2 days   | QA / Editor  | Bilingual output validated  |
| Documentation & Demo   | 1 day    | BA / Dev     | Architecture review ready   |

**Total Effort:** ~10 working days (one sprint).
**Deliverable:** Working bilingual toggle (English/Welsh) across sample pages using Dataverse as translation source.

---

Would you like me to generate a **Jira CSV template** (Epic → Story → Task) formatted for bulk import with story points and assignees?
