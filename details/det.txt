Here is the **rewritten and enhanced "Application Architecture" introduction section** tailored specifically for **SVT (Sales Verification Tool)** under the BST Council Tax platform, while reusing and building on your provided text:

---

### **3.6 Application Architecture (Sales Verification Tool - SVT)**

This section breaks down the architecture and design of the **Sales Verification Tool (SVT)** as part of the BST Council Tax (CT) platform, outlining the IT application components impacted, their associated systems, interfaces, and digital services. It includes all changes delivered by the Development and Test & Release teams, including logical and physical views of the solution, covering custom components, reused infrastructure, and integrations with downstream and upstream systems. The architecture identifies all functional elements, data sources, APIs, and user-facing apps required to deliver the SVT feature set within the Dynamics-based VOS platform.

SVT is built to operate **within the existing Council Tax (CT) Dynamics 365 environment (VOS)** and leverages the core BST architecture—comprising **commercial off-the-shelf (COTS) Dynamics 365 products** and an **enterprise data layer** based on **PostgreSQL and SQL Server** for high-volume sales and property data. This architecture is underpinned by a suite of **Azure-based integration services**, including **Azure API Management (APIM)**, SharePoint for asset storage, and Entra ID for user authentication and auditing.

The **initial scope** of SVT is to deliver a digital solution that enables internal caseworkers, QA personnel, and team managers to review, validate, score, and promote sales records that influence property valuation and Council Tax banding decisions. SVT fits within the broader “six-box” valuation model and integrates seamlessly with existing BST components, such as PAD, Jobs, and Requests, while introducing new virtual data access to VaaS sales data and enhanced UI for verification workflows.

Unlike standard Council Tax workflows which originate from customer requests, **SVT begins with external sales data**—fetched from **VaaS SQL via DAL2 APIs exposed through Azure APIM**—and integrates this seamlessly into the Dynamics interface via **Virtual Tables**. Updates from caseworkers (e.g., sale usefulness, condition scoring, QA outcomes) are written back securely to the VaaS database.

SVT supports a **modular extension** of the VOS model-driven app through a combination of:

* Embedded **Canvas Apps (Custom Pages)**
* Reusable **Dataverse entities** for process tracking (Jobs, Tasks, Requests)
* Sharable **security roles and RBAC models**
* Modern **Power Platform connectors** and **custom APIs**
* Bespoke UI components using **Power Apps Component Framework (PCF)**
* Data-rich virtual entities backed by **virtual table data providers**

The application design ensures SVT operates **natively within the existing VOS user experience**, without requiring a separate standalone app, aligning with existing licensing and platform patterns.

---

Let me know if you'd like me to continue with the **Logical Application View** or **Physical Component Diagram Description** next.


Here’s the enhanced version of the **Core Applications Being Used** table for SVT, now including **Azure API Management (APIM)**, **VaaS SQL**, and **PostgreSQL (PAD)** alongside Dynamics 365, Power Platform, and SharePoint:

---

### **3.6.1 Core Applications Being Used**

| **Application**           | **Description**                                                                                                                                                                                                     | **Usage in SVT**                                                                                                                                                                                                                                                                                                                                                                                     |
| ------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Dynamics 365 (VOS)**    | Case Management platform (model-driven app) within the Council Tax domain, used to manage requests, jobs, tasks, and PAD data. Exposes structured business logic, workflows, forms, and security via the Dataverse. | Hosts SVT within the existing CT model-driven app. SVT custom pages (Canvas Apps) and PCF controls are embedded here. Existing entities like Job, Request, and Task are reused. Navigation is integrated into the Council Tax sitemap. RBAC and SRS roles are reused for access control. SVT registers Virtual Tables inside Dynamics to fetch and update external sales records via DAP2 endpoints. |
| **Power Platform**        | A suite of low-code tools including Canvas Apps, Power Automate, Power FX, PCF, and connectors to integrate external services. Enables agile business logic, UI customization, and workflow orchestration.          | Used extensively for SVT UI (Canvas Apps for dashboard and view), data binding, conditional rendering, and validation. Power Automate is used for background logic (e.g., audit records). PCF controls (e.g., DetailsList, PAD viewer) display structured tabular data. Connectors like Dataverse, SharePoint, and Office 365 Users are embedded to fetch user details, PAD info, or image assets.   |
| **SharePoint Online**     | Microsoft 365-compliant document and image repository. Supports metadata, versioning, secure file access, and content preview via Microsoft Graph and SharePoint APIs.                                              | Used to host 300+ static comparable images (kitchen, bathroom, finishes) used in SVT for condition scoring. These are linked through dropdowns or gallery viewers in the view screen. Images are not user-uploaded and reside in a secure internal SharePoint library. End-users interact only via embedded image components in the Canvas App—never directly with SharePoint UI.                    |
| **Azure API Management**  | Secure gateway layer that manages and exposes DAP2/DAL2 APIs used for sales data retrieval and update. Supports rate limiting, authentication (OAuth2.0, subscription key), and logging.                            | Exposes endpoints used by Virtual Table Providers and Custom APIs/Actions inside Dynamics. SVT reads sales verification data and writes back decisions through APIM-managed endpoints. Ensures consistent auth patterns and telemetry. Provides scalable API governance. All sales data flows into Dynamics via APIM, with no direct DB access from Dynamics.                                        |
| **VaaS SQL Server**       | Structured data store for SVT sales data, holding verified records and outputs from caseworkers. Exposes stored procedures and views used by DAP2 APIs.                                                             | Acts as the **write destination** for sales verification decisions, QA notes, and promote-to-master actions. Data is accessed via stored procedures or API wrappers surfaced through DAL2/DAP2. Does **not** store PAD or legacy property data. Exclusively used for SVT verification pipelines. All updates are channeled through virtual tables or custom APIs within Dynamics via APIM.           |
| **PostgreSQL (PAD PVDB)** | High-volume transactional database used to store property attribute data (PAD) and linked valuation records across BST CT.                                                                                          | Continues to serve as the **source of truth** for PAD details. PAD data is surfaced via existing virtual tables and PCF controls in Dynamics (e.g., PAD viewer). PAD updates are **not** performed within SVT; instead, users navigate to PAD editing functionality already embedded in CT/VOS. SVT references PAD as part of verification but doesn't own or update PAD data directly.              |

---

Would you like a **diagram** next (physical or logical architecture), or shall we move on to the **Interfaces/APIs** section?

