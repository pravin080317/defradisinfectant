conversation is focused on optimizing how SSU ID (Statutory Spatial Unit ID) is used in your current bulk submission and case creation process, particularly improving efficiency by reducing redundant address lookups. Here’s a breakdown of what’s happening:

Current Workflow
Bulk Submission Upload (via Excel):

When Michael uploads an Excel file in bulk submission, it contains addresses and other metadata.

During processing, an address match process is triggered which attempts to map the address to an SSU ID using certain parameters.

Address Matching Algorithm Order:

The matching process checks the following in order:

BACode and VARF (Billing Authority and Reference)

UPRN (Unique Property Reference Number)

Address string and postcode

Once matched:

If a match is found, an SSU ID is retrieved.

However, currently, the SSU ID is not written back to the "Portal Interface Table" or detail records.

Only other address and file-related data are written to the Dataverse tables.

Problem Identified
The SSU ID is available after address matching but is not being stored.

Instead, the backend systems (case management/integration layer) are doing the address matching again to derive SSU ID when a submission is created.

This results in redundant processing since the front-end (Michael’s process) already has the SSU ID.

Proposed Improvement
✅ Store the SSU ID immediately in the Dataverse "Portal Interface Table" or wherever the related portal data is being kept after Michael's process retrieves it.

Benefits
Reduces unnecessary address match lookups by the integration layer.

Streamlines the case creation/submission process downstream.

Improves data quality by directly associating cases with a verified SSU ID.

Future Architectural Consideration
There’s a mention of an ongoing architectural change to centralize the address information into a single “Address Table” to be reused across multiple systems/entities (like Portal Request, Request Line Items, etc.).

Today’s scenario:

Addresses are scattered and duplicated across different records.

Future state:

All systems/entities will reference a centralized Address Table, making address deduplication and maintenance much easier.

Key Takeaways
The front door (frontend process) should persist the SSU ID right after the address match.

The integration layer won't need to redo the SSU lookup, reducing API calls and processing overhead.

The current reliance on various address strings and codes will reduce since the SSU ID is the “gold standard” for identifying the property.




Jira Epic
Title: Optimize Address Matching by Capturing SSU ID in Portal Interface

User Story 1:
Title: Persist SSU ID in Dataverse After Bulk Submission Address Match

Description:
As a portal developer, I want to store the SSU ID retrieved during the front-door bulk submission process directly into the Portal Interface Table (Dataverse), so that downstream integration (case management) does not need to repeat the SSU ID lookup.

Acceptance Criteria:

Upon successful address match in bulk submission, capture the SSU ID.

Persist the SSU ID in the related Dataverse table (e.g., "Portal File Management" or "Request Line Item").

Ensure existing address fields are also maintained alongside SSU ID.

Sub-task 1.1:
Title: Identify SSU ID retrieval points in the front-door process
Description:
Analyze the existing logic (e.g., bulk Excel upload + address match plugin) and identify the exact point where SSU ID is available for persistence.

Sub-task 1.2:
Title: Extend Dataverse schema to include SSU ID
Description:
Confirm if the relevant Dataverse table has a column for SSU ID. If not, create a new column with appropriate schema and data type.

Sub-task 1.3:
Title: Update plugin/service to persist SSU ID in Dataverse
Description:
Enhance the plugin or service where the address match is completed to store the SSU ID directly into Dataverse (via IOrganizationService or Web API).

Sub-task 1.4:
Title: Validate integration behavior with downstream case management
Description:
Coordinate with the case management team to validate that submissions populated with SSU ID skip redundant address matching processes.

User Story 2:
Title: Document and communicate design change for SSU ID usage

Description:
As a developer, I want to document this SSU ID persistence logic and inform the wider team (e.g., case management, integration, and business analysts), ensuring the change is reflected in technical design documents.
