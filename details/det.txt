5.2.1 Power Pages Portal

Provides an authenticated and user-friendly interface for local authorities to submit and manage reports.

Implements forms-based authentication using Azure Entra ID B2B.

Enables submission of individual reports or bulk file uploads.

Facilitates error resolution and report corrections within the portal.

Customization for Power Pages:

Power Pages implementation for the LA Portal adheres to the Gov.UK Design System to ensure accessibility, usability, and compliance with government standards.

Customizations to Power Pages are limited to specific use cases while ensuring the core framework remains intact.

Design and Styling: Gov.UK Design System

All visual components and styles are derived from the Gov.UK Design System.

Pre-compiled CSS files from the design system are used to maintain consistency and accessibility.

The Gov.UK CSS files are added to the portal as web files in the Portal Management App.

HTML templates provided by the design system are used with minimal customization, ensuring compliance with accessibility standards.

Example: Buttons, input fields, and other UI components are customized only for IDs, text, and limited inline styles (e.g., display: none for dynamic visibility).

Web Files:

Assets such as fonts, CSS, images, and JavaScript are stored as Web Files in the Portal Management App.

These files are organized with a logical folder structure under assets, fonts, and images.

Custom JavaScript:

Majority of the validations and functions are handled via JavaScript customizations through a consolidated file named validation.js. This file contains reusable functions for common tasks like:

Validating inputs.

Displaying/clearing error messages.

Writing data back to Dataverse using the Web API.

Custom scripts for specific pages, like Dashboard tiles, are placed in a separate JavaScript file called card.js.

Web Form Customizations:

Dynamic Components: Radio buttons, dropdowns, and form inputs are dynamically generated based on Dataverse Choices or other relevant fields.

Example: A set of radio buttons uses the value attribute to map directly to Dataverse fields, with JavaScript reading this value and writing it back using Web API.

Error Handling: Custom error messages are pre-defined with display: none and toggled dynamically using JavaScript.

Webpages, Templates, and Site Settings:

Webpages, templates, site settings, bindings, and table permissions are managed within the Portal Management App to ensure structured access control and security.
