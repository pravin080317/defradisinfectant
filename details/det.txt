Sure—here’s a clearer breakdown of **Step 3** (updating your JavaScript so the header buttons always announce the correct sort state and next action):

---

### 3A. Reset every header to “not sorted” at the start

Before you begin swapping rows, loop through **all** of your header buttons and set:

- `aria-sort="none"`  
- `aria-label="<Column Name>, not sorted. Activate to sort ascending."`  

```js
function sortTable(n, isDate) {
  // 1) Reset all headers
  document
    .querySelectorAll('.govuk-table__header button')
    .forEach(btn => {
      const name = btn.textContent.trim();
      btn.setAttribute('aria-sort', 'none');
      btn.setAttribute(
        'aria-label',
        `${name}, not sorted. Activate to sort ascending.`
      );
    });

  // …now figure out your `dir` (asc/desc) and do the row swapping…
```

---

### 3B. After you determine the new sort direction (`asc` or `desc`), update **only the clicked** header

1. **Grab** the button you clicked:  
   ```js
   const btn = document
     .getElementById('{{tableid}}')
     .querySelectorAll('.govuk-table__header button')[n];
   const colName = btn.textContent.trim();
   ```
2. **Set** its `aria-sort` to `"ascending"` or `"descending"`:  
   ```js
   btn.setAttribute('aria-sort', dir === 'asc' ? 'ascending' : 'descending');
   ```
3. **Update** its `aria-label` so it reads, for example:  
   - When sorted ascending:  
     > “Date uploaded, sorted ascending. Activate to sort descending.”  
   - When sorted descending:  
     > “Date uploaded, sorted descending. Activate to sort ascending.”  

   ```js
   if (dir === 'asc') {
     btn.setAttribute(
       'aria-label',
       `${colName}, sorted ascending. Activate to sort descending.`
     );
   } else {
     btn.setAttribute(
       'aria-label',
       `${colName}, sorted descending. Activate to sort ascending.`
     );
   }
   ```

---

#### Why these two sub-steps matter

- **Resetting all headers** ensures you never accidentally leave an old header flagged as sorted.  
- **Setting `aria-sort`** tells screen readers the *current* sort on that column.  
- **Updating `aria-label`** combines:
  - The column’s name  
  - Its current sort state  
  - The action that will happen if the user activates it again  

Together, they give users exactly what they need—no noisy triangles—and fully satisfy WCAG’s “name, role, value” requirements for interactive controls.
