Here is the **rewritten and enhanced "Application Architecture" introduction section** tailored specifically for **SVT (Sales Verification Tool)** under the BST Council Tax platform, while reusing and building on your provided text:

---

### **3.6 Application Architecture (Sales Verification Tool - SVT)**

This section breaks down the architecture and design of the **Sales Verification Tool (SVT)** as part of the BST Council Tax (CT) platform, outlining the IT application components impacted, their associated systems, interfaces, and digital services. It includes all changes delivered by the Development and Test & Release teams, including logical and physical views of the solution, covering custom components, reused infrastructure, and integrations with downstream and upstream systems. The architecture identifies all functional elements, data sources, APIs, and user-facing apps required to deliver the SVT feature set within the Dynamics-based VOS platform.

SVT is built to operate **within the existing Council Tax (CT) Dynamics 365 environment (VOS)** and leverages the core BST architecture—comprising **commercial off-the-shelf (COTS) Dynamics 365 products** and an **enterprise data layer** based on **PostgreSQL and SQL Server** for high-volume sales and property data. This architecture is underpinned by a suite of **Azure-based integration services**, including **Azure API Management (APIM)**, SharePoint for asset storage, and Entra ID for user authentication and auditing.

The **initial scope** of SVT is to deliver a digital solution that enables internal caseworkers, QA personnel, and team managers to review, validate, score, and promote sales records that influence property valuation and Council Tax banding decisions. SVT fits within the broader “six-box” valuation model and integrates seamlessly with existing BST components, such as PAD, Jobs, and Requests, while introducing new virtual data access to VaaS sales data and enhanced UI for verification workflows.

Unlike standard Council Tax workflows which originate from customer requests, **SVT begins with external sales data**—fetched from **VaaS SQL via DAL2 APIs exposed through Azure APIM**—and integrates this seamlessly into the Dynamics interface via **Virtual Tables**. Updates from caseworkers (e.g., sale usefulness, condition scoring, QA outcomes) are written back securely to the VaaS database.

SVT supports a **modular extension** of the VOS model-driven app through a combination of:

* Embedded **Canvas Apps (Custom Pages)**
* Reusable **Dataverse entities** for process tracking (Jobs, Tasks, Requests)
* Sharable **security roles and RBAC models**
* Modern **Power Platform connectors** and **custom APIs**
* Bespoke UI components using **Power Apps Component Framework (PCF)**
* Data-rich virtual entities backed by **virtual table data providers**

The application design ensures SVT operates **natively within the existing VOS user experience**, without requiring a separate standalone app, aligning with existing licensing and platform patterns.

---

Let me know if you'd like me to continue with the **Logical Application View** or **Physical Component Diagram Description** next.


Here’s the enhanced version of the **Core Applications Being Used** table for SVT, now including **Azure API Management (APIM)**, **VaaS SQL**, and **PostgreSQL (PAD)** alongside Dynamics 365, Power Platform, and SharePoint:

---

### **3.6.1 Core Applications Being Used**

| **Application**           | **Description**                                                                                                                                                                                                     | **Usage in SVT**                                                                                                                                                                                                                                                                                                                                                                                     |
| ------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Dynamics 365 (VOS)**    | Case Management platform (model-driven app) within the Council Tax domain, used to manage requests, jobs, tasks, and PAD data. Exposes structured business logic, workflows, forms, and security via the Dataverse. | Hosts SVT within the existing CT model-driven app. SVT custom pages (Canvas Apps) and PCF controls are embedded here. Existing entities like Job, Request, and Task are reused. Navigation is integrated into the Council Tax sitemap. RBAC and SRS roles are reused for access control. SVT registers Virtual Tables inside Dynamics to fetch and update external sales records via DAP2 endpoints. |
| **Power Platform**        | A suite of low-code tools including Canvas Apps, Power Automate, Power FX, PCF, and connectors to integrate external services. Enables agile business logic, UI customization, and workflow orchestration.          | Used extensively for SVT UI (Canvas Apps for dashboard and view), data binding, conditional rendering, and validation. Power Automate is used for background logic (e.g., audit records). PCF controls (e.g., DetailsList, PAD viewer) display structured tabular data. Connectors like Dataverse, SharePoint, and Office 365 Users are embedded to fetch user details, PAD info, or image assets.   |
| **SharePoint Online**     | Microsoft 365-compliant document and image repository. Supports metadata, versioning, secure file access, and content preview via Microsoft Graph and SharePoint APIs.                                              | Used to host 300+ static comparable images (kitchen, bathroom, finishes) used in SVT for condition scoring. These are linked through dropdowns or gallery viewers in the view screen. Images are not user-uploaded and reside in a secure internal SharePoint library. End-users interact only via embedded image components in the Canvas App—never directly with SharePoint UI.                    |
| **Azure API Management**  | Secure gateway layer that manages and exposes DAP2/DAL2 APIs used for sales data retrieval and update. Supports rate limiting, authentication (OAuth2.0, subscription key), and logging.                            | Exposes endpoints used by Virtual Table Providers and Custom APIs/Actions inside Dynamics. SVT reads sales verification data and writes back decisions through APIM-managed endpoints. Ensures consistent auth patterns and telemetry. Provides scalable API governance. All sales data flows into Dynamics via APIM, with no direct DB access from Dynamics.                                        |
| **VaaS SQL Server**       | Structured data store for SVT sales data, holding verified records and outputs from caseworkers. Exposes stored procedures and views used by DAP2 APIs.                                                             | Acts as the **write destination** for sales verification decisions, QA notes, and promote-to-master actions. Data is accessed via stored procedures or API wrappers surfaced through DAL2/DAP2. Does **not** store PAD or legacy property data. Exclusively used for SVT verification pipelines. All updates are channeled through virtual tables or custom APIs within Dynamics via APIM.           |
| **PostgreSQL (PAD PVDB)** | High-volume transactional database used to store property attribute data (PAD) and linked valuation records across BST CT.                                                                                          | Continues to serve as the **source of truth** for PAD details. PAD data is surfaced via existing virtual tables and PCF controls in Dynamics (e.g., PAD viewer). PAD updates are **not** performed within SVT; instead, users navigate to PAD editing functionality already embedded in CT/VOS. SVT references PAD as part of verification but doesn't own or update PAD data directly.              |

---

Would you like a **diagram** next (physical or logical architecture), or shall we move on to the **Interfaces/APIs** section?


Great. Let’s now draft the **Requirements** section for the SVT (Sales Verification Tool) within the context of the BST platform. This section should reflect both:

* **Functional** needs (e.g., verifying sales, QA, PAD lookups)
* **Non-functional** needs (e.g., reuse, security, performance, extensibility)

---

### **3.6.2 Requirements**

The SVT solution has been designed based on a prioritised set of **functional**, **technical**, and **non-functional requirements** aligned with the goals of the Council Tax Revaluation Programme and BST’s enterprise architecture.

These requirements have been collaboratively defined with business analysts, product owners, technical leads, and caseworker representatives—framed against existing Council Tax (CT) model-driven capabilities and extended via integration with external sales data sources.

---

#### **3.6.2.1 Functional Requirements**

| **Category**                 | **Description**                                                                                                                                                                                                                                                                          |
| ---------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Sales Verification**       | Allow caseworkers and managers to view property-level sales data retrieved from VaaS via DAP2 APIs. Each sales record should show attributes like price, transaction date, agents, tenure, condition scoring, etc., with specific fields editable (e.g., useful sale, QA status, notes). |
| **Dashboard Search**         | Ability to search for a sale by UARN, Postcode, or Address. Result grid must show UARN, address, postcode, transaction date, price, flag, and a “View” button to drill into detailed verification.                                                                                       |
| **Condition Scoring**        | Capture subjective and objective details about kitchen, bathroom, finishes, etc., using dropdowns and image galleries sourced from SharePoint. Automatically calculate condition score and condition category based on selected attributes.                                              |
| **Promote to Master**        | Enable managers or QAs to promote LR/MILO records to the Sale Summary section. This action triggers backend logic and updates VaaS SQL via API.                                                                                                                                          |
| **PAD Data Reference**       | Read-only display of PAD attributes (e.g., composite status, coordinate quality) via PCF controls. Users must navigate to CT PAD screen for updates if required.                                                                                                                         |
| **QA Review Workflow**       | Allow QA users to flag sales as Passed or Failed with mandatory notes. If Failed, the task must be reassigned to the original caseworker.                                                                                                                                                |
| **Audit & Traceability**     | All actions including Promote to Master, QA status changes, dropdown selections, and notes should be auditable.                                                                                                                                                                          |
| **User Role Access**         | Role-based control over editable fields, visibility of QA sections, promote buttons, and view-only components. Reuse of SRS roles (Manager, Caseworker, QA, Read-only).                                                                                                                  |
| **SharePoint Image Library** | Show static reference images in a non-editable gallery (from SharePoint) linked to dropdowns in condition scoring. No upload or delete actions allowed for end users.                                                                                                                    |

---

#### **3.6.2.2 Non-Functional Requirements**

| **Category**                 | **Description**                                                                                                                                                                                                        |
| ---------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Reusability**              | Leverage existing CT/VOS infrastructure (model-driven app, sitemap, Dataverse entities like Job/Request/Task). Where possible, reuse PAD components, plugins, and PCF.                                                 |
| **Extensibility**            | New Canvas Pages, Virtual Tables, and APIs must be modular to allow future enhancements (e.g., extended scoring criteria, Welsh valuation workflows, comparative sale history).                                        |
| **Performance**              | Ensure load times for Dashboard and View pages stay < 2 seconds on average. Use virtual tables optimally—paginated, filtered, and scoped to one sale record at a time to reduce latency.                               |
| **Security & Compliance**    | All external API calls must pass Azure AD (Entra ID) context, Correlation ID, and use server-to-server (S2S) auth. DLP-compliant connector usage. No unapproved direct data writes to PostgreSQL or SQL from frontend. |
| **Data Residency**           | All services and data must be hosted in **UK South** region.                                                                                                                                                           |
| **Audit & Traceability**     | All user interactions (e.g., promote action, QA outcome) to be logged for audit purposes. Changes to virtual table data must be attributable to a user identity.                                                       |
| **Role-Based Access**        | Fine-grained control across the UI components based on SRS role mappings. QA section and promote functionality must be hidden/disabled for users without appropriate permissions.                                      |
| **Offline Support**          | Not required. All interactions are expected to occur within connected environments.                                                                                                                                    |
| **Deployment & Maintenance** | SVT must be packaged and deployed via BST pipelines. Power Platform ALM (solution export/import) to be used for updates. API endpoints and virtual table changes must be version-controlled and documented.            |

---

Would you like me to continue next with the **Data Model and API Interfaces**, or should we prepare the **Physical & Logical Architecture Diagrams** first?


3.6.3 Application Platform – Dynamics 365 Power Platform

The SVT (Sales Verification Tool) is built and hosted within the existing Council Tax (CT) model-driven Dynamics 365 environment, also referred to as VOS. It is a key extension of the BST platform, designed to support internal users (managers, caseworkers, QA) in the verification of property sale data and downstream PAD decision-making.

The SVT solution leverages the Microsoft Power Platform, including Dynamics 365, Dataverse, Canvas Apps (custom pages), Virtual Tables, Power Automate, and PowerApps Component Framework (PCF). It integrates with external data systems such as VaaS SQL Server (for new sales decisions) and existing PostgreSQL PAD database, while complying with BST-wide architectural standards.

3.6.3.1 Dynamics 365 Capabilities
Capability	Usage in SVT
Model-Driven App (VOS)	SVT is embedded within the existing Council Tax model-driven app (VOS). It reuses core sitemap areas for case management (Jobs, Requests, PAD) and extends them with new links to SVT dashboard and custom pages.
Core Dataverse Entities	Reuses existing BST CT entities such as Job, Request, Task, and PAD. These are linked to SVT sales verification screens for navigation, assignment, and audit.
Security Roles (SRS)	Inherits existing CT user roles (e.g., Caseworker, Manager, QA). Role-based access is enforced to control visibility and editability of dashboard/search screens, QA sections, and promote-to-master actions.
Plugins	Used for logic that triggers backend interactions such as: auto-creating requests/tasks from SVT, post-validation triggers, and audit event generation. Written in .NET and registered server-side.
Workflows	Used sparingly. Power Automate is preferred for non-synchronous flows. Workflows may be used for synchronous validation when appropriate (e.g., field checks, auto-setting job status).
Custom API / Custom Action	Implemented to handle promote-to-master operation, and dynamic updates to VaaS SQL via APIM. These APIs are also used to retrieve PAD or comparable sale data and interact securely with DAL2/DAP2 endpoints.
PCF Controls	Enhanced DetailsList control is reused for SVT dashboard listings. A modified PADS Viewer control is used to render PAD fields. Gallery components may also be used to show SharePoint-linked images.
JavaScript / Form Logic	Used selectively for advanced field validation, dynamic field hiding (e.g., showing/hiding MILO toggle, LR fields), or API-triggered refreshes. Form scripting follows platform standards and does not break client-side security model.
Business Rules	Used for lightweight field-level validation, for example: making QA notes mandatory on Fail, hiding condition notes unless specific dropdowns are selected.
Business Process Flows	Not used in SVT initially. May be introduced in future if verification workflow across Job/Request entities needs to be explicitly modelled.
3.6.3.2 Power Platform Extensions
Component	Purpose in SVT
Canvas App (Custom Page)	Hosts the SVT Dashboard (search & summary) and SVT View Screen (sales verification). Provides dynamic UX using Power FX, dropdowns, multi-section layout, and SharePoint-based image galleries.
Power FX Expressions	Used within canvas app controls for logic, filtering, conditional styling, control visibility, and error messages. Enables rapid prototyping and dynamic interaction without complex coding.
Power Automate	Used for async flows such as audit record logging, notification of QA completion, and pre-validation of external data (non-critical path only).
SharePoint Integration	SharePoint is used to host a reference image library (~300 public images) for condition scoring (kitchen/bathroom/etc.). The canvas app accesses this via standard SharePoint connector. No direct uploads or editing is permitted.
Connectors Used	- Dataverse – For all core Job/Task/Request interaction
- Office 365 Users – For user profile/photo
- SharePoint – For image galleries
- HTTP (via Custom API) – For APIM communication to DAP2/DAL2
3.6.3.3 Data Sources
Source	Purpose in SVT
PostgreSQL (PAD)	Used for PAD details of existing hereditaments. Accessed via existing virtual table and PCF viewer logic.
VaaS SQL Server	Primary store for SVT sales verification decisions. Updates are written back here post-verification.
Dataverse	Hosts Jobs, Tasks, Requests, security roles, audit logs, and supports integration with CT model-driven app.
3.6.3.4 Virtual Tables and Data Provider

SVT uses Virtual Tables and a Custom Virtual Entity Data Provider to surface external VaaS SQL data (via DAL2 APIs) within Dynamics.

Tables are defined per logical group (e.g., SaleSummaryVT, SDLTVT, LRPPDVT, QAOutcomeVT).

Read and write operations are supported where applicable (e.g., condition score updates).

All calls use server-to-server auth with OAuth2 + Subscription Key (APIM secured).

Virtual tables are visible in the model-driven and canvas pages and respect Dynamics metadata.

This enables caseworkers to work with external data as if it were native to Dynamics, while retaining external data residency and control.

