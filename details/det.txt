<script type="text/javascript">
(function () {
    var connectionString = "{{ settings['applicationinsights/enabletracking'] }}"; // Site setting

    var sessionTTL = 30 * 60 * 1000; // 30 minutes
    var sessionId = sessionStorage.getItem("customSessionId") || crypto.randomUUID();
    sessionStorage.setItem("customSessionId", sessionId);

    var userId = "{{ user.id | default: 'Anonymous' }}";
    var userName = "{{ user.fullname | default: 'N/A' }}";
    var council = "{{ user.voap_contact_ActiveAccount_account.voa_baccodeacc | default: 'Unknown'}}";
    var userStatus = "{{ user.id | default: '' }}" ? "LoggedIn" : "Guest";

    var pageTitle = document.title;
    var pageUrl = window.location.href;

    // Load Application Insights
    var script = document.createElement("script");
    script.src = "https://js.monitor.azure.com/scripts/b/ai.3.gbl.min.js";
    script.setAttribute("crossorigin", "anonymous");
    script.onload = function () {
        const appInsights = new Microsoft.ApplicationInsights.ApplicationInsights({
            config: {
                connectionString: connectionString,
                disableCookiesUsage: true,
                disableAjaxTracking: true,
                disableFetchTracking: true
            }
        });
        appInsights.loadAppInsights();

        // Add telemetry initializer
        appInsights.addTelemetryInitializer(function (envelope) {
            envelope.tags["ai.cloud.role"] = window.Microsoft?.Dynamic365?.Portal?.type || "PowerPages";
            envelope.tags["ai.cloud.roleInstance"] = window.Microsoft?.Dynamic365?.Portal?.version || "v1";
            envelope.tags["ai.session.id"] = sessionId;
            envelope.tags["ai.user.id"] = userId;

            envelope.data.baseData.properties = envelope.data.baseData.properties || {};
            envelope.data.baseData.properties["UserId"] = userId;
            envelope.data.baseData.properties["UserName"] = userName;
            envelope.data.baseData.properties["UserStatus"] = userStatus;
            envelope.data.baseData.properties["UserCouncil"] = council;
            envelope.data.baseData.properties["PortalPageLoadTime"] = new Date().toISOString();
            envelope.data.baseData.properties["SessionId"] = sessionId;
        });

        // Set authenticated user context
        {% if user %}
        appInsights.setAuthenticatedUserContext(userId, undefined, true);
        {% endif %}

        // Login Event – fire only once per session
        if (!sessionStorage.getItem("hasTrackedLogin")) {
            appInsights.trackEvent({
                name: "LoginTracking",
                properties: {
                    userId: userId,
                    userName: userName,
                    status: userStatus,
                    council: council,
                    loginTime: new Date().toISOString()
                }
            });
            sessionStorage.setItem("hasTrackedLogin", "true");
        }

        // Page View Event – track once per TTL per page
        var currentPageKey = "hasSentPageView_" + window.location.pathname;
        var now = Date.now();
        var existing = JSON.parse(sessionStorage.getItem(currentPageKey) || "{}");

        if (!existing.timestamp || (now - existing.timestamp) > sessionTTL) {
            appInsights.trackPageView({
                name: pageTitle,
                uri: pageUrl
            });

            appInsights.trackEvent({
                name: "PageViewTracking",
                properties: {
                    userId: userId,
                    userName: userName,
                    status: userStatus,
                    council: council,
                    pageTitle: pageTitle,
                    url: pageUrl,
                    pageLoadTime: new Date().toISOString()
                }
            });

            sessionStorage.setItem(currentPageKey, JSON.stringify({ timestamp: now }));
        }
    };

    document.head.appendChild(script);
})();
</script>
