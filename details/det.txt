The point raised about “sorting and pagination issues” isn’t that REST APIs can’t do those operations — it’s that Dataverse’s Virtual Table runtime automatically handles $filter, $orderby, $top, and $skip only for OData endpoints.

For non-OData APIs (like SVT’s /svt/sales/search), a Custom Data Provider (C# plugin) has to manually:

Translate Dataverse QueryExpression filters into JSON or query strings,

Implement server-side paging and sorting mapping,

And maintain that translation logic whenever the API schema changes.

This adds an extra layer of code maintenance and performance tuning (e.g., mapping $skip to offset, $top to limit, handling nulls, etc.), which doesn’t exist for OData endpoints.

So technically it’s feasible either way — but with a non-OData API, sorting/paging/filtering become custom logic we have to maintain inside the Data Provider rather than native OData features handled by Dataverse automatically.
