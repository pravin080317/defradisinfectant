Perfect üëç ‚Äî let‚Äôs put it into a clear table format.
Each Epic is a header, then the Features underneath with API, Method, Purpose, and Data store (read/write).


---

üìë API Mapping per Epic & Feature


---

Epic: Material Increase Cases (CR-10 / CR-18)

Feature	API Endpoint	Method	Purpose	Data Store

Enhance CR-10 Process	/pads/{uarn}	PUT	Update PAD (2005 PGSQL) before CR-10 hold; include new attributes	PostgreSQL (PAD SoR)
	/dlm/supplementary-jobs	POST	Create Forward DLM job for 2028 band review	Dataverse Jobs
	/vaas/assessments:upsert	POST	Write 2028 band result (PAD snapshot + band)	VaaS SQL
Existing CR-10 exercised	/pads?status=pending&list=2005	GET	Fetch all pending CR-10 PADs	PostgreSQL
	/pads/{uarn}/commit	PUT	Commit PAD changes manually	PostgreSQL
End-date inactive CR-10s	/cr10/{id}/enddate	PUT	Close inactive Welsh CR-10s on go-live	Dataverse Jobs



---

Epic: Valuation Phase DLM

Feature	API Endpoint	Method	Purpose	Data Store

PAD / Address / Hereditament Changes	/pads/{uarn}	PUT	Weekly PAD updates (trigger AVM rerun)	PostgreSQL
	/valuation/avm/run	POST	Run AVM model with updated PAD	VaaS SQL (AVM)
Property Batch Link Update	/properties/{uarn}/batch	PUT	Update property‚Äôs batch linkage	PostgreSQL + Dataverse
Acceptable Range for Batch	/batches/{id}/range-check	POST	Check property against batch margin	VaaS SQL (schemes/margins)
Split Batches	/batches/{id}/split	POST	Split batch by attributes	Dataverse + PostgreSQL
SBL Impact	/sbl/anomalies	POST	Push anomalies (out-of-range, mis-batch)	Dataverse + SBL



---

Epic: Creating the Draft List

Feature	API Endpoint	Method	Purpose	Data Store

Sync 2005 & 2028 Lists	/pads/syncTo2028	POST	Copy PAD updates from 2005 ‚Üí 2028	PostgreSQL ‚Üí VaaS SQL
Migration into VOS	/draftList/migrate	POST	Bulk push 2028 assessments into VOS	VaaS SQL
View Draft List Bands (internal)	/bands/{uarn}?list=2028&state=draft	GET	Caseworker views 2028 draft band	VaaS SQL
Draft List Bands on Portal	/public/bands/{uarn}	GET	Show 2005 + 2028 draft bands	VaaS SQL (synced)
BA Draft List Schedules	/ba/schedules/draft	POST	Send draft list to BAs	VaaS SQL



---

Epic: Draft List Phase DLM

Feature	API Endpoint	Method	Purpose	Data Store

Band Review Supplementary Job	/dlm/supplementary-jobs	POST	Create new 2028 band review job	Dataverse
	/valuation/avm/getBand	POST	Get band from scheme	VaaS SQL
Property Scheme Link Update	/properties/{uarn}/scheme	PUT	Update scheme allocation	VaaS SQL
Acceptable Range for Scheme	/schemes/{id}/margins	GET	Read acceptable band margins	VaaS SQL
	/schemes/{id}/margins	PUT	Update margins after review	VaaS SQL
Update Band Margin for Scheme	/schemes/{id}/band-update	POST	Re-calculate band after margin change	VaaS SQL



---

Epic: Creating the Compiled List

Feature	API Endpoint	Method	Purpose	Data Store

Stop Accepting DL Enquiries	/enquiries/draft/lock	PUT	Lock new DL enquiries after cut-off	Dataverse + Portal
Bulk Close DL Enquiries	/enquiries/closeBulk	POST	Close all draft list enquiries with outcome	Dataverse
Commit Pending PADs	/compiled/pads/commit	POST	Convert pending PADs ‚Üí committed	PostgreSQL + VaaS SQL
End-date inactive CR-10s	/compiled/cr10/end-date	POST	End-date open CR-10s at go-live	Dataverse
Publish 2028 Live List	/compiled/publish	POST	Finalise 2028 Draft ‚Üí Live	VaaS SQL
Frontend Live List Band	/public/bands/{uarn}	GET	Customer views 2028 live band	VaaS SQL
BA Live List Schedules	/ba/schedules/live	POST	Push 2028 live list to Billing Authorities	VaaS SQL



---

Epic: Live List Maintenance

Feature	API Endpoint	Method	Purpose	Data Store

Data Changes as BAU	/pads/{uarn}	PUT	Update PADs in live state	PostgreSQL
	/dlm/supplementary-jobs	POST	Trigger backward/forward DLM based on date	Dataverse
Material Increase Cases Post-2028	/pads/{uarn}	PUT	PAD update for material increase	PostgreSQL
	/valuation/avm/getBand	POST	Run banding scheme again	VaaS SQL
Using Banding Scheme	/schemes/allocate	POST	Allocate property to scheme	VaaS SQL
Dashboard / BI	/dlm/jobs?status=open	GET	Show open DLM cases for MI dashboards	Dataverse + VaaS SQL



---

‚úÖ This table shows for each feature:

API endpoint

Method

Purpose

Where it reads/writes data



---

Would you like me to highlight which of these are completely new APIs vs. which are enhancements to DAL (existing PAD APIs) so you can present the deltas cleanly to architects?

