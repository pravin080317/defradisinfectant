To track **page views** in Application Insights using **KQL**, you‚Äôll be querying the `pageViews` table.

---

### ‚úÖ **Basic Page Views Query**

Shows all page views with URL, timestamp, and user ID.

```kql
pageViews
| extend userId = tostring(customDimensions.userId)
| project timestamp, name, url, userId
| order by timestamp desc
```

---

### ‚úÖ **Page Views Per Day**

```kql
pageViews
| summarize totalPageViews = count() by bin(timestamp, 1d)
| order by timestamp desc
```

---

### ‚úÖ **Page Views by URL / Page Name**

```kql
pageViews
| summarize views = count() by name, url
| order by views desc
```

---

### ‚úÖ **Page Views by User**

```kql
pageViews
| extend userId = tostring(customDimensions.userId)
| summarize views = count() by userId
| order by views desc
```

---

### ‚úÖ **Page Views by User and Page**

```kql
pageViews
| extend userId = tostring(customDimensions.userId)
| summarize views = count() by userId, name
| order by views desc
```

---

### ‚úÖ **Unique Users per Page (Engagement)**

```kql
pageViews
| extend userId = tostring(customDimensions.userId)
| summarize uniqueUsers = dcount(userId) by name
| order by uniqueUsers desc
```

---

### üîç **Notes**

* `name` ‚Üí Usually the page title (passed via `trackPageView({ name })`)
* `url` ‚Üí Full page URL
* `customDimensions.userId` ‚Üí Added via telemetry initializer in your script

Let me know if you want to visualize bounce rate or time-on-page ‚Äî that needs `pageViewPerformance` or `duration` fields.
