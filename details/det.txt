function sortTable(colIndex, isDate) {
  const table   = document.getElementById('{{tableid}}');
  const tbody   = table.tBodies[0];
  const rows    = Array.from(tbody.rows);
  const headers = table.querySelectorAll('.govuk-table__header button');
  const btn     = headers[colIndex];
  const name    = btn.textContent.trim();

  // 1) CAPTURE previous state *before* we reset anything:
  //    (could be "ascending", "descending" or "none")
  const prevState = btn.getAttribute('aria-sort') || 'none';

  // 2) RESET ALL HEADERS to “not sorted”
  headers.forEach(h => {
    const col = h.textContent.trim();
    h.setAttribute('aria-sort', 'none');
    h.setAttribute(
      'aria-label',
      `${col}, not sorted. Activate to sort ascending.`
    );
  });

  // 3) DECIDE new direction by flipping prevState
  //    none→ascending, asc→descending, desc→ascending
  const newState = prevState === 'ascending' ? 'descending' : 'ascending';

  // 4) SORT the rows array in one pass
  rows.sort((a, b) => {
    let va = a.cells[colIndex].innerText.trim();
    let vb = b.cells[colIndex].innerText.trim();
    if (isDate) {
      va = new Date(va);
      vb = new Date(vb);
    } else {
      va = va.toLowerCase();
      vb = vb.toLowerCase();
    }
    if (va < vb) return newState === 'ascending' ? -1 : 1;
    if (va > vb) return newState === 'ascending' ? 1 : -1;
    return 0;
  });

  // 5) RE-APPEND the sorted rows
  tbody.innerHTML = '';
  rows.forEach(r => tbody.appendChild(r));

  // 6) UPDATE the clicked header with newState
  btn.setAttribute('aria-sort', newState);
  btn.setAttribute(
    'aria-label',
    newState === 'ascending'
      ? `${name}, sorted ascending. Activate to sort descending.`
      : `${name}, sorted descending. Activate to sort ascending.`
  );

  // 7) (optional) refresh pagination / UI
  // currentPage = 1;
  // displayTable();
  // generatePagination();
}
