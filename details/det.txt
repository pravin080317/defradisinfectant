Here‚Äôs a **combined, client-facing explanation** you can use in a **workshop, Show & Tell, or steering meeting** to clearly outline the **filtering challenges in SVT using PCF grid**, compared to out-of-the-box capabilities like Dynamics or SharePoint.

---

## üéØ Filtering in SVT ‚Äì What‚Äôs Possible, What‚Äôs Challenging

---

### ‚úÖ **What Dynamics / SharePoint Offer by Default**

| Platform                       | Filtering               | Notes                                                        |
| ------------------------------ | ----------------------- | ------------------------------------------------------------ |
| **Dynamics 365 (Dataverse)**   | ‚úÖ Built-in              | Header filters, sorting, saved views, security trimming.     |
| **SharePoint Lists**           | ‚úÖ Built-in              | Search, filter by column, views, and indexed performance.    |
| **Canvas App Tables**          | ‚ùå Manual                | Needs Power Fx filters, no native column UI.                 |
| **SVT (PCF Grid - Fluent UI)** | ‚ùå Manual (Custom Build) | No default filter controls. Needs end-to-end implementation. |

---

### ‚öôÔ∏è **In SVT, Filters Must Be Built Manually**

* We are using a **PCF grid (Fluent UI DetailsList)** inside a **Canvas Custom Page**, but:

  * Data **does not come from Dataverse or SharePoint**.
  * Instead, it comes from **custom APIs calling Azure SQL**.
* This means we need to build:

  * The **filter UI** (text box, dropdown, date pickers, etc.)
  * The **backend filtering logic** (API and SQL query filtering)
  * The **UI refresh logic** (rebind grid after each filter)

---

### üß± **Key Challenges with PCF Filtering in SVT**

| Area                         | Challenges                                                                                                                                              |
| ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Performance**              | Server-side filtering is a must. Loading full dataset to filter in UI will crash or lag. Filters must be passed to API, API must push to SQL (indexed). |
| **Accessibility**            | No built-in screen reader support. All ARIA roles, labels, and live updates must be manually coded for WCAG 2.2 compliance.                             |
| **State Management**         | Each filter input must retain state. Filter combinations need managing (e.g. Sale Date + Flag + Status). Clearing/resetting needs custom logic.         |
| **User Experience**          | Users are used to Dynamics/SharePoint filters. In PCF, there‚Äôs no "Clear Filters", no saved views, no auto-summary unless we build it.                  |
| **Security Filtering**       | All filters must respect user-level permissions. Unlike Dynamics/SharePoint, there is **no auto-security trimming** ‚Äî needs to be built into API.       |
| **Testing Complexity**       | QA must test multiple combinations of filters, along with paging, sorting, and edge cases (e.g. empty results, slow API responses).                     |
| **Derived Fields Filtering** | SVT includes derived fields like flags, bands, QA status ‚Äî filtering them needs additional backend logic (joins, computed columns).                     |

---

### üí¨ What This Means for the SVT Tool

> "In Dynamics or SharePoint, filters are ready-made. In SVT, because we‚Äôre working with custom components and SQL, we‚Äôll need to **build filtering from scratch** ‚Äî both on the front end and the back end.
>
> This gives us flexibility but also increases development time and testing effort. Filters will be fully possible ‚Äî but to make them **performant, secure, and accessible**, we‚Äôll need to implement:
>
> * Filter inputs (text/dropdown/date),
> * Backend filtering APIs,
> * Grid refresh & paging logic,
> * Accessibility-compliant labels & keyboard navigation,
> * Security-aware data restrictions."

---

### üìå Summary for Decision-Makers

| Topic                    | Notes                                                                            |
| ------------------------ | -------------------------------------------------------------------------------- |
| **Feasible?**            | ‚úÖ Yes, but not out-of-the-box                                                    |
| **Effort?**              | Moderate to High (custom build)                                                  |
| **Accessibility Ready?** | ‚ùå Not by default ‚Äì must be implemented                                           |
| **Performance Impact?**  | Depends on API & SQL filter design                                               |
| **User Experience?**     | Will replicate Dynamics style ‚Äì but manually                                     |
| **Recommendation**       | Proceed with filters, but scoped clearly with API design and accessibility input |

---

Let me know if you'd like this converted to:

* ‚úÖ PowerPoint bullets
* ‚úÖ Confluence page format
* ‚úÖ Summary table for sign-off
* ‚úÖ Developer work item list for ALM planning
