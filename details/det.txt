**SVT Feature to Solution Mapping (with Virtual Table Architecture)**

---

### 1. **Data Ingestion and Output Integration**

**Solution Summary:**
The SVT will ingest daily batch data of revaluation sales records from DAP2 using virtual tables in Dataverse. No data is persisted in Dataverse directly; the virtual table points to DAP2 as the live source. Tasks for each sale record will be created and stored in Dataverse’s standard Task entity, with the task ID written back to DAP2 to maintain linkage. Upon completion, the verification outcomes including source and condition scores will be sent back to DAP2.

**To-Be Components:**

* Virtual Table (DAP2 Reval Sales)
* Canvas App Page embedded in Model-driven App
* Task Table in Dataverse
* Power Automate Flows (for sync/trigger)
* Custom APIs (for write-back)

**Assumptions:**

* Only completed records ingested
* Daily ingestion (not real-time)
* No manual intervention required

**Dependencies:**

* DAP2 data schema and API readiness
* Virtual table pattern approval
* Secure write-back endpoints in DAP2

---

### 2. **Sales Record Management and Decision Logging**

**Solution Summary:**
The caseworker accesses reval sales data via canvas page (embedded in model-driven app), sourced through virtual tables from DAP2. A related Task (from Dataverse) maps each verification job. UI provides editable fields for source/condition score and navigation to historical/outlier sales. All updates are recorded and pushed back to DAP2 through API connectors. The audit trail is maintained via Dataverse plugin logging, and raw data sources (WLTT, MILO, LRPPD) are shown as read-only attributes.

**To-Be Components:**

* Canvas Page in Model-driven App
* Virtual Table: DAP2 Reval Sales
* Task (Dataverse)
* Custom Connectors/APIs (write-back, audit)

**Assumptions:**

* Only key attributes are editable
* Caseworker UI allows full sales investigation

**Dependencies:**

* UI schema finalization
* Outlier and condition scoring logic from DAP2
* Attribute mapping across sources

---

### 3. **Role Based Access and Permissions**

**Solution Summary:**
Access to SVT canvas app is restricted using Dataverse security roles. Team Manager and Caseworker roles are implemented to control visibility and permitted actions. Team Manager can assign tasks, override decisions, and reassign work, while Caseworker is restricted to assigned jobs. Role info is used for audit tracking and UI control logic.

**To-Be Components:**

* Model-Driven App Security Roles
* Canvas Page with Role Check Logic
* Task assignment via Power Automate/API

**Assumptions:**

* Only two roles currently; QA is pending

**Dependencies:**

* Business confirmation on roles and permissions
* Synchronization of assigned job info in DAP2

---

### 4. **Enhanced UI Navigation and Data Exploration**

**Solution Summary:**
SVT canvas app page allows users to search, filter, and explore reval sales using filters such as address, postcode, outlier flag, and job ID. Both caseworker and manager dashboards are powered by DAP2 data via virtual tables, with tasks managed via the Dataverse task table. UI supports dynamic filters, outlier navigation, and conditional UI controls to create jobs for unmatched sales.

**To-Be Components:**

* Canvas Page UI (search, filter, dashboard)
* Virtual Table (Reval Sales from DAP2)
* Dataverse Task Table (filtered by user)

**Assumptions:**

* Layout and filters may evolve with UAT feedback

**Dependencies:**

* Virtual Table performance on large data
* Filter implementation and paging logic

---

### 5. **Data Enhancement Case Management (via Dynamics)**

**Solution Summary:**
PAD and DLM-related changes are not handled inside SVT but via Dynamics 365 Case Management. The SVT allows raising enhancement requests linked to reval sales, which are written to DAP2 and sync to Dynamics Case entities. The SVT prevents final decision submission if linked enhancement is still open.

**To-Be Components:**

* Canvas Page (raise enhancement request)
* Custom API to write enhancement to DAP2
* Dynamics Case Management integration (via DAL1)

**Assumptions:**

* PAD and DLM cases are distinct

**Dependencies:**

* Dynamics Case schema
* Enhancement sync pipeline between DAP2 ↔ DAL1 ↔ Dynamics

---

### 6. **Structured Presentation of Sale Attributes Across Data Sources**

**Solution Summary:**
Attributes from WLTT, MILO, LRPPD, PAD and Reval Sale are displayed in grouped tabs/sections within the canvas page, powered by virtual tables and DAP2 APIs. Only a subset (like source) is editable. The UI maintains a consistent layout with other VOA tools and allows read-only navigation to linked sources with audit logging on edits.

**To-Be Components:**

* Canvas Page: Multi-tab view per source
* DAP2 APIs/Virtual Tables per source
* Editable fields with audit logging (via plugin)

**Assumptions:**

* Source formatting standardised across SVT and VOS

**Dependencies:**

* Confirmation of editable fields
* Consistent schema for all source APIs

---

### 7. **Quality Assurance Workflow for Sales Verification**

**Solution Summary:**
QA users access completed verifications in read-only mode via their own dashboard in SVT. They can mark a record as Pass (lock for downstream use) or Fail (return to caseworker). Tasks in Dataverse are updated accordingly and changes are pushed to DAP2. QA role is separate, with permissions configured in Dataverse.

**To-Be Components:**

* Canvas Page for QA Dashboard
* Read-only Reval Sale View (DAP2 via virtual table)
* Task Status Update (Dataverse)
* Decision API Write-back to DAP2

**Assumptions:**

* QA actions timestamped

**Dependencies:**

* Confirmation of QA flow from business
* Role provisioning and Dataverse permissions
