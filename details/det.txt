Response to Security Review on Instrumentation Key (IK) & Application Insights Telemetry Implementation
Context & Summary
Our implementation currently uses Application Insights Connection Strings for telemetry collection, but since the Instrumentation Key (IK) is still embedded in the Connection String, it remains a concern. Additionally:

Local authentication cannot be disabled in Application Insights, as client-side telemetry requires unauthenticated ingestion.
Microsoft will deprecate IK usage after March 2025, pushing for Entra ID authentication.
We need to assess hybrid approaches (client-side JS + server-side API or Azure Function) to securely collect telemetry.
Given this, we propose conducting a Proof of Concept (PoC) to evaluate a hybrid solution and need input on whether to accept the current risk as a short-term approach or pause implementation until PoC results are available.

‚úÖ Response to Security Concerns & Recommendations
1Ô∏è‚É£ Transition to Connection Strings with Entra ID Authentication
üîπ Security Team's Concern
Microsoft recommends replacing Instrumentation Keys (IKs) with Connection Strings + Entra ID authentication.
Ensures only authenticated clients can send telemetry.
‚úÖ Our Response
‚úî We are already using Connection Strings in our implementation.
‚úî However, the Connection String still contains the IK, meaning unauthorized clients can still send telemetry.
‚úî Local authentication cannot be disabled because Application Insights does not support Entra ID authentication for client-side telemetry.
‚úî Next Steps: We will analyze the feasibility of using hybrid telemetry (client + server-side) via Azure Function & API Management.

2Ô∏è‚É£ Use Two Different Keys for Client-Side & Server-Side Telemetry
üîπ Security Team's Concern
We should use separate telemetry configurations for frontend (browser telemetry) and backend (server telemetry).
Even with two different keys, the client-side key is still exposed.
‚úÖ Our Response
‚úî We already separate telemetry ingestion:

Client-side telemetry (for user behavior analytics).
Server-side telemetry (for backend logs & API monitoring). ‚úî Challenge: IK is still exposed in Connection String, even though we separate data. ‚úî Next Steps: As part of the PoC, we will:
Investigate APIM + Azure Function-based telemetry ingestion to remove direct client-side IK exposure.
Explore server-side logging of critical telemetry events instead of fully relying on client-side telemetry.
3Ô∏è‚É£ Hide the IK Using a Reverse Proxy Solution
üîπ Security Team's Concern
A reverse proxy can prevent client-side exposure of the Instrumentation Key.
Needs to be designed before implementation.
‚úÖ Our Response
‚úî Agreed. We need a PoC to analyze APIM or Azure Function to securely collect telemetry.
‚úî Possible Hybrid Approach:

Client-side telemetry goes through a secure backend (e.g., Azure Function).
Backend injects credentials securely before sending to Application Insights.
Rate limits & authentication layers (OAuth, API Keys) can be applied.
‚úî Next Steps:

PoC to determine feasibility of using APIM & Azure Function as a telemetry proxy.
Decision required: Should we continue with the current risk in the short term, or pause telemetry ingestion until PoC is complete?
4Ô∏è‚É£ Set Up Alerts for High Traffic Spikes
üîπ Security Team's Concern
Alerts help detect abnormal spikes but do not prevent attacks.
IP restrictions may not work since legitimate HMRC users could share IPs.
‚úÖ Our Response
‚úî Short-Term Action: Enable Application Insights Alerts for:

Unusual telemetry spikes (bot/spam attacks).
Repeated identical requests from single sources.
Failed telemetry submissions. ‚úî Long-Term Action:
Implement rate-limiting via APIM to mitigate spam.
Analyze PoC results to determine how best to prevent abuse.
5Ô∏è‚É£ Restricting IPs & Handling HMRC User Access
üîπ Security Team's Concern
Since the LA portal is restricted to HMRC users, blocking specific IPs may not be feasible.
A malicious internal user could still exploit telemetry.
‚úÖ Our Response
‚úî IP blocking alone is not a viable solution.
‚úî Instead, we will:

Monitor & flag suspicious activity in telemetry logs.
Evaluate user-based access controls (e.g., requiring Azure AD authentication for telemetry submissions).
Explore bot detection & request validation as part of the PoC.
6Ô∏è‚É£ Disabling Debug Features in the Browser
üîπ Security Team's Concern
Users can inspect JavaScript and extract telemetry submission details.
Preventing browser debugging entirely is not practical.
‚úÖ Our Response
‚úî We cannot prevent debugging, but we can ensure that no critical secrets are exposed.
‚úî Security Measures:

Remove Instrumentation Key from client-side JavaScript.
Send telemetry through a secure backend API instead of exposing credentials.
Implement request obfuscation & validation to prevent unauthorized telemetry injection.
üöÄ Next Steps & PoC Plan
Task	Owner	Target Date
Finalize short-term risk acceptance vs. delay for PoC completion	Security Team & Stakeholders	TBD
PoC: Investigate APIM + Azure Function for secure telemetry ingestion	Dev Team	TBD
Enable telemetry anomaly alerts in Application Insights	DevOps Team	TBD
Implement rate-limiting & security validation for telemetry	Dev Team	TBD
üìå Final Decision Required
Short-Term: Can we proceed with the current risk of client-side telemetry exposure until the PoC is completed?
Long-Term: Should we fully migrate telemetry ingestion to a hybrid approach (client ‚Üí API ‚Üí server ‚Üí Application Insights)?
PoC Execution: Do we pause current telemetry efforts or proceed while evaluating secure alternatives?
