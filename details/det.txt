Summary of the Discussion:
1. Current PG SQL Query Design (Schedules Download Page)
Currently, the APM (API) URL used to pull schedules applies two filter criteria: fileType and VA code.

Initially, you were getting all schedules from metadata without filtering, and then filtering by VA code on the client side.

Now filtering is done upstream in the API query itself (via fileType and VA code), which reduces the payload and improves performance.

2. Schedule Display Requirement
The original design fetched multiple formats (CSV, XML, HTML, etc.) as separate entries, leading to duplicated rows.

The new design expects a deduplicated list of schedules (file name without extensions), and then separate download buttons for different formats (CSV, XML, HTML) after selection.

This logic is currently implemented on the portal/plugin layer.

3. New Requirement: Filter by "Last 6 Weeks"
To filter schedules further based on a "last 6 weeks" rule:

Option A: Add an additional query parameter in the existing APM URL/API.

Option B: Filter the records post-fetch in the portal/plugin logic (less efficient).

You recommend Option A (filter upstream in the API or PG SQL view).

4. "Last Downloaded" Column Request
Stakeholders want to track and display the "last downloaded" timestamp.

Challenges:

Virtual entity (Dataverse view on PG SQL) is read-only; you cannot directly update PG SQL metadata.

Requires maintaining a new table (staging) in Dataverse to track downloads by users.

Complexity increases if the requirement is user-specific (showing per-user download history).

Unclear business value for this effort as the actual downloaded files are static schedules.

5. Download Logging Alternatives:
Option 1: Log download actions to a custom Dataverse table with details (user, schedule ID, timestamp).

Option 2: Explore if PG metadata view can be extended with a last_downloaded field (less likely if PG SQL is locked down).

Option 3: Do nothing, and instead provide better UX/design, including clear buttons and guidance to avoid confusion about download actions.

Key Recommendations:
Request Metadata API owners to handle filtering (6 weeks) upstream.

Reject the "Last Downloaded" column unless a clear and justified business value is provided, as it introduces significant overhead.

If audit trail is mandatory, propose Option 1 with Dataverse staging table for download logs.





Spike: Evaluate "6 Weeks" Filtering for Schedules Download Page

Objective

Investigate and recommend a solution to implement a filter on the schedules download page to show only records from the last 6 weeks.

Background

Currently, the schedules are retrieved via an APM API call that filters based on:

File Type

VA Code

The requirement is to add an additional filter based on the published date, limiting the results to schedules from the past 6 weeks.

Current Design

API (APM URL) fetches data directly from a PG SQL view.

Filtering for File Type and VA Code happens at the API level.

The frontend/plugin simply displays what is returned by the API.

Options to Explore

Option 1: Filter Upstream (Preferred)

Add "last 6 weeks" filter in PG SQL view or API query logic.

Minimal changes needed in the portal/plugin.

Keeps payload light and optimized.

Option 2: Filter in Plugin Layer

Apply date filter (published date >= today - 6 weeks) inside the portal/plugin.

Less efficient as entire dataset will still be fetched from API.

Tasks for the Spike

Confirm if PG SQL metadata view has published_date or created_date field.

Check if the APM API accepts additional query parameters.

If so, propose adding the "6 weeks" logic directly to API/PG SQL.

If not, assess plugin-level filtering impact on performance.

Deliverables

Summary of findings (API capability + PG SQL view capabilities).

Recommended solution for implementation.

Estimation of effort for the chosen solution.

Pro/Con Document: "Last Downloaded" Column Request

Requirement Summary

Stakeholders have requested to display a "Last Downloaded" timestamp for schedules.

Current Challenge

The schedules data is retrieved from a read-only virtual entity (PG SQL metadata), which prevents direct write-back to the source.

Proposed Approach

Introduce a Dataverse staging table to record download actions (user, timestamp, schedule ID).

When a user downloads a schedule, a record is written to the Dataverse table.

This table is then queried alongside the schedules list to show the "last downloaded" info.

Pros

Allows tracking of download actions per user or per schedule.

Business auditability for key actions.

Can be reused for other auditing needs.

Cons

Increases system complexity.

Requires maintaining synchronization between schedules and staging table.

Adds additional API call/load on the download action.

Minimal tangible business value (UX concerns could be solved via UI clarity).

Does not solve the edge case of downloads happening via shared credentials.

Recommendation

Defer implementation unless business can provide a compelling value proposition.

Alternatively, improve UX design (e.g., clearer download buttons, tooltips) to address user confusion.
