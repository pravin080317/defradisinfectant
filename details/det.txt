Here is the **rewritten and enhanced "Application Architecture" introduction section** tailored specifically for **SVT (Sales Verification Tool)** under the BST Council Tax platform, while reusing and building on your provided text:

---

### **3.6 Application Architecture (Sales Verification Tool - SVT)**

This section breaks down the architecture and design of the **Sales Verification Tool (SVT)** as part of the BST Council Tax (CT) platform, outlining the IT application components impacted, their associated systems, interfaces, and digital services. It includes all changes delivered by the Development and Test & Release teams, including logical and physical views of the solution, covering custom components, reused infrastructure, and integrations with downstream and upstream systems. The architecture identifies all functional elements, data sources, APIs, and user-facing apps required to deliver the SVT feature set within the Dynamics-based VOS platform.

SVT is built to operate **within the existing Council Tax (CT) Dynamics 365 environment (VOS)** and leverages the core BST architecture—comprising **commercial off-the-shelf (COTS) Dynamics 365 products** and an **enterprise data layer** based on **PostgreSQL and SQL Server** for high-volume sales and property data. This architecture is underpinned by a suite of **Azure-based integration services**, including **Azure API Management (APIM)**, SharePoint for asset storage, and Entra ID for user authentication and auditing.

The **initial scope** of SVT is to deliver a digital solution that enables internal caseworkers, QA personnel, and team managers to review, validate, score, and promote sales records that influence property valuation and Council Tax banding decisions. SVT fits within the broader “six-box” valuation model and integrates seamlessly with existing BST components, such as PAD, Jobs, and Requests, while introducing new virtual data access to VaaS sales data and enhanced UI for verification workflows.

Unlike standard Council Tax workflows which originate from customer requests, **SVT begins with external sales data**—fetched from **VaaS SQL via DAL2 APIs exposed through Azure APIM**—and integrates this seamlessly into the Dynamics interface via **Virtual Tables**. Updates from caseworkers (e.g., sale usefulness, condition scoring, QA outcomes) are written back securely to the VaaS database.

SVT supports a **modular extension** of the VOS model-driven app through a combination of:

* Embedded **Canvas Apps (Custom Pages)**
* Reusable **Dataverse entities** for process tracking (Jobs, Tasks, Requests)
* Sharable **security roles and RBAC models**
* Modern **Power Platform connectors** and **custom APIs**
* Bespoke UI components using **Power Apps Component Framework (PCF)**
* Data-rich virtual entities backed by **virtual table data providers**

The application design ensures SVT operates **natively within the existing VOS user experience**, without requiring a separate standalone app, aligning with existing licensing and platform patterns.

---

Let me know if you'd like me to continue with the **Logical Application View** or **Physical Component Diagram Description** next.
