import json
import random
from datetime import datetime, timedelta

# Sample data seeds
billing_authorities = [
    "Cardiff City Council", "Swansea Council", "Conwy County Borough Council",
    "Newport City Council", "Carmarthenshire County Council", "Wrexham County Borough Council"
]
dwelling_types = ["Detached", "Semi-Detached", "Terraced", "Flat"]
review_flags_options = [["Outlier"], ["Key Sale"], ["Outlier", "Key Sale"], []]
overall_flags = ["Exclude", "Investigate - Can Use", "No Flag"]
summary_flags_options = [["AVMVarianceHigh"], ["ComparableOK"], ["KeySaleManualCheck"], ["StableTrend"]]
task_statuses = ["New", "Assigned", "Completed", "QA Assigned"]
valuers = [f"Valuer{str(i).zfill(2)}" for i in range(1, 11)]
qcs = [f"QC{str(i).zfill(2)}" for i in range(1, 6)]
base_date = datetime(2024, 1, 1)

# Generate 100 records
records = []
for i in range(1, 101):
    transaction_date = base_date + timedelta(days=random.randint(0, 365))
    record = {
        "SaleID": f"S{str(i).zfill(6)}",
        "TaskID": f"T{100000 + i}",
        "UPRN": f"10000123{str(4000 + i)}",
        "Address": f"{i} Example Road, City {i % 10}",
        "Postcode": f"CF{i % 10}{random.randint(1, 9)} {random.randint(1, 9)}AA",
        "BillingAuthority": random.choice(billing_authorities),
        "TransactionDate": transaction_date.strftime("%Y-%m-%d"),
        "SalePrice": random.randint(120000, 750000),
        "Ratio": round(random.uniform(0.85, 1.15), 2),
        "DwellingType": random.choice(dwelling_types),
        "FlaggedForReview": random.choice(["Yes", "No"]),
        "ReviewFlags": random.choice(review_flags_options),
        "OutlierRatio": round(random.uniform(0.8, 1.3), 2),
        "OverallFlag": random.choice(overall_flags),
        "SummaryFlags": random.choice(summary_flags_options),
        "TaskStatus": random.choice(task_statuses),
        "AssignedTo": random.choice(valuers),
        "QCAssignedTo": random.choice(qcs if random.random() > 0.3 else [""])
    }
    records.append(record)

# Save to JSON file
file_path = "/mnt/data/svt_sample_data_100.json"
with open(file_path, "w") as f:
    json.dump(records, f, indent=2)

file_path


# Generate 500 records following the same schema
records_500 = []
for i in range(1, 501):
    transaction_date = base_date + timedelta(days=random.randint(0, 365))
    record = {
        "SaleID": f"S{str(i).zfill(6)}",
        "TaskID": f"T{100000 + i}",
        "UPRN": f"10000123{str(8000 + i)}",
        "Address": f"{i} Example Road, City {i % 20}",
        "Postcode": f"CF{i % 10}{random.randint(1, 9)} {random.randint(1, 9)}AA",
        "BillingAuthority": random.choice(billing_authorities),
        "TransactionDate": transaction_date.strftime("%Y-%m-%d"),
        "SalePrice": random.randint(120000, 750000),
        "Ratio": round(random.uniform(0.85, 1.15), 2),
        "DwellingType": random.choice(dwelling_types),
        "FlaggedForReview": random.choice(["Yes", "No"]),
        "ReviewFlags": random.choice(review_flags_options),
        "OutlierRatio": round(random.uniform(0.8, 1.3), 2),
        "OverallFlag": random.choice(overall_flags),
        "SummaryFlags": random.choice(summary_flags_options),
        "TaskStatus": random.choice(task_statuses),
        "AssignedTo": random.choice(valuers),
        "QCAssignedTo": random.choice(qcs if random.random() > 0.3 else [""])
    }
    records_500.append(record)

# Save to JSON file
file_path_500 = "/mnt/data/svt_sample_data_500.json"
with open(file_path_500, "w") as f:
    json.dump(records_500, f, indent=2)

file_path_500
